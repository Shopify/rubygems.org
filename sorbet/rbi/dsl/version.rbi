# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Version`.
# Please instead update this file by running `bin/tapioca dsl Version`.

class Version
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Version).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Version]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Version)) }
    def fifth; end

    sig { returns(::Version) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Version)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Version) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def find_or_initialize_by(attributes, &block); end

    sig { returns(T.nilable(::Version)) }
    def find_sole_by; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Version) }
    def first!; end

    sig { returns(T.nilable(::Version)) }
    def forty_two; end

    sig { returns(::Version) }
    def forty_two!; end

    sig { returns(T.nilable(::Version)) }
    def fourth; end

    sig { returns(::Version) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Version) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Version).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Version).void)).returns(::Version) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Version).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Version).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Version)) }
    def second; end

    sig { returns(::Version) }
    def second!; end

    sig { returns(T.nilable(::Version)) }
    def second_to_last; end

    sig { returns(::Version) }
    def second_to_last!; end

    sig { returns(T.nilable(::Version)) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Version) }
    def take!; end

    sig { returns(T.nilable(::Version)) }
    def third; end

    sig { returns(::Version) }
    def third!; end

    sig { returns(T.nilable(::Version)) }
    def third_to_last; end

    sig { returns(::Version) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::GemDownload) }
    def build_gem_download(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_pusher(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Rubygem) }
    def build_rubygem(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GemDownload) }
    def create_gem_download(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GemDownload) }
    def create_gem_download!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_pusher(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_pusher!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Rubygem) }
    def create_rubygem(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Rubygem) }
    def create_rubygem!(*args, &blk); end

    sig { returns(::Dependency::PrivateCollectionProxy) }
    def dependencies; end

    sig { params(value: T::Enumerable[::Dependency]).void }
    def dependencies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def dependency_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def dependency_ids=(ids); end

    sig { returns(T.nilable(::GemDownload)) }
    def gem_download; end

    sig { params(value: T.nilable(::GemDownload)).void }
    def gem_download=(value); end

    sig { returns(T.nilable(::User)) }
    def pusher; end

    sig { params(value: T.nilable(::User)).void }
    def pusher=(value); end

    sig { returns(T.nilable(::GemDownload)) }
    def reload_gem_download; end

    sig { returns(T.nilable(::User)) }
    def reload_pusher; end

    sig { returns(T.nilable(::Rubygem)) }
    def reload_rubygem; end

    sig { returns(T.nilable(::Rubygem)) }
    def rubygem; end

    sig { params(value: T.nilable(::Rubygem)).void }
    def rubygem=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def authors; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def authors=(value); end

    sig { returns(T::Boolean) }
    def authors?; end

    sig { returns(T.nilable(::String)) }
    def authors_before_last_save; end

    sig { returns(T.untyped) }
    def authors_before_type_cast; end

    sig { returns(T::Boolean) }
    def authors_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def authors_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def authors_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def authors_changed?; end

    sig { returns(T.nilable(::String)) }
    def authors_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def authors_previous_change; end

    sig { returns(T::Boolean) }
    def authors_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def authors_previously_was; end

    sig { returns(T.nilable(::String)) }
    def authors_was; end

    sig { void }
    def authors_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def built_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def built_at=(value); end

    sig { returns(T::Boolean) }
    def built_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def built_at_before_last_save; end

    sig { returns(T.untyped) }
    def built_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def built_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def built_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def built_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def built_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def built_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def built_at_previous_change; end

    sig { returns(T::Boolean) }
    def built_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def built_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def built_at_was; end

    sig { void }
    def built_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def canonical_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def canonical_number=(value); end

    sig { returns(T::Boolean) }
    def canonical_number?; end

    sig { returns(T.nilable(::String)) }
    def canonical_number_before_last_save; end

    sig { returns(T.untyped) }
    def canonical_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def canonical_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def canonical_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def canonical_number_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def canonical_number_changed?; end

    sig { returns(T.nilable(::String)) }
    def canonical_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def canonical_number_previous_change; end

    sig { returns(T::Boolean) }
    def canonical_number_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def canonical_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def canonical_number_was; end

    sig { void }
    def canonical_number_will_change!; end

    sig { returns(T.untyped) }
    def cert_chain; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def cert_chain=(value); end

    sig { returns(T::Boolean) }
    def cert_chain?; end

    sig { returns(T.untyped) }
    def cert_chain_before_last_save; end

    sig { returns(T.untyped) }
    def cert_chain_before_type_cast; end

    sig { returns(T::Boolean) }
    def cert_chain_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cert_chain_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cert_chain_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def cert_chain_changed?; end

    sig { returns(T.untyped) }
    def cert_chain_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cert_chain_previous_change; end

    sig { returns(T::Boolean) }
    def cert_chain_previously_changed?; end

    sig { returns(T.untyped) }
    def cert_chain_previously_was; end

    sig { returns(T.untyped) }
    def cert_chain_was; end

    sig { void }
    def cert_chain_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def description_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { returns(T::Boolean) }
    def description_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::String)) }
    def full_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def full_name=(value); end

    sig { returns(T::Boolean) }
    def full_name?; end

    sig { returns(T.nilable(::String)) }
    def full_name_before_last_save; end

    sig { returns(T.untyped) }
    def full_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def full_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def full_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def full_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def full_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def full_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def full_name_previous_change; end

    sig { returns(T::Boolean) }
    def full_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def full_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def full_name_was; end

    sig { void }
    def full_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def indexed; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def indexed=(value); end

    sig { returns(T::Boolean) }
    def indexed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def indexed_before_last_save; end

    sig { returns(T.untyped) }
    def indexed_before_type_cast; end

    sig { returns(T::Boolean) }
    def indexed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def indexed_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def indexed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def indexed_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def indexed_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def indexed_previous_change; end

    sig { returns(T::Boolean) }
    def indexed_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def indexed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def indexed_was; end

    sig { void }
    def indexed_will_change!; end

    sig { returns(T.nilable(::String)) }
    def info_checksum; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def info_checksum=(value); end

    sig { returns(T::Boolean) }
    def info_checksum?; end

    sig { returns(T.nilable(::String)) }
    def info_checksum_before_last_save; end

    sig { returns(T.untyped) }
    def info_checksum_before_type_cast; end

    sig { returns(T::Boolean) }
    def info_checksum_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def info_checksum_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def info_checksum_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def info_checksum_changed?; end

    sig { returns(T.nilable(::String)) }
    def info_checksum_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def info_checksum_previous_change; end

    sig { returns(T::Boolean) }
    def info_checksum_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def info_checksum_previously_was; end

    sig { returns(T.nilable(::String)) }
    def info_checksum_was; end

    sig { void }
    def info_checksum_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def latest; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def latest=(value); end

    sig { returns(T::Boolean) }
    def latest?; end

    sig { returns(T.nilable(T::Boolean)) }
    def latest_before_last_save; end

    sig { returns(T.untyped) }
    def latest_before_type_cast; end

    sig { returns(T::Boolean) }
    def latest_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def latest_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def latest_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def latest_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def latest_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def latest_previous_change; end

    sig { returns(T::Boolean) }
    def latest_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def latest_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def latest_was; end

    sig { void }
    def latest_will_change!; end

    sig { returns(T.untyped) }
    def licenses; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def licenses=(value); end

    sig { returns(T::Boolean) }
    def licenses?; end

    sig { returns(T.untyped) }
    def licenses_before_last_save; end

    sig { returns(T.untyped) }
    def licenses_before_type_cast; end

    sig { returns(T::Boolean) }
    def licenses_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def licenses_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def licenses_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def licenses_changed?; end

    sig { returns(T.untyped) }
    def licenses_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def licenses_previous_change; end

    sig { returns(T::Boolean) }
    def licenses_previously_changed?; end

    sig { returns(T.untyped) }
    def licenses_previously_was; end

    sig { returns(T.untyped) }
    def licenses_was; end

    sig { void }
    def licenses_will_change!; end

    sig { returns(T.untyped) }
    def metadata; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def metadata=(value); end

    sig { returns(T::Boolean) }
    def metadata?; end

    sig { returns(T.untyped) }
    def metadata_before_last_save; end

    sig { returns(T.untyped) }
    def metadata_before_type_cast; end

    sig { returns(T::Boolean) }
    def metadata_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def metadata_changed?; end

    sig { returns(T.untyped) }
    def metadata_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_previous_change; end

    sig { returns(T::Boolean) }
    def metadata_previously_changed?; end

    sig { returns(T.untyped) }
    def metadata_previously_was; end

    sig { returns(T.untyped) }
    def metadata_was; end

    sig { void }
    def metadata_will_change!; end

    sig { returns(T.nilable(::String)) }
    def number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::String)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def number_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def number_changed?; end

    sig { returns(T.nilable(::String)) }
    def number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def number_previous_change; end

    sig { returns(T::Boolean) }
    def number_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def platform; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def platform=(value); end

    sig { returns(T::Boolean) }
    def platform?; end

    sig { returns(T.nilable(::String)) }
    def platform_before_last_save; end

    sig { returns(T.untyped) }
    def platform_before_type_cast; end

    sig { returns(T::Boolean) }
    def platform_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def platform_changed?; end

    sig { returns(T.nilable(::String)) }
    def platform_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_previous_change; end

    sig { returns(T::Boolean) }
    def platform_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def platform_previously_was; end

    sig { returns(T.nilable(::String)) }
    def platform_was; end

    sig { void }
    def platform_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def position; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def position=(value); end

    sig { returns(T::Boolean) }
    def position?; end

    sig { returns(T.nilable(::Integer)) }
    def position_before_last_save; end

    sig { returns(T.untyped) }
    def position_before_type_cast; end

    sig { returns(T::Boolean) }
    def position_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def position_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def position_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_previous_change; end

    sig { returns(T::Boolean) }
    def position_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def position_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def position_was; end

    sig { void }
    def position_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def prerelease=(value); end

    sig { returns(T::Boolean) }
    def prerelease?; end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_before_last_save; end

    sig { returns(T.untyped) }
    def prerelease_before_type_cast; end

    sig { returns(T::Boolean) }
    def prerelease_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def prerelease_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def prerelease_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def prerelease_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def prerelease_previous_change; end

    sig { returns(T::Boolean) }
    def prerelease_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_was; end

    sig { void }
    def prerelease_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def pusher_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def pusher_id=(value); end

    sig { returns(T::Boolean) }
    def pusher_id?; end

    sig { returns(T.nilable(::Integer)) }
    def pusher_id_before_last_save; end

    sig { returns(T.untyped) }
    def pusher_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def pusher_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pusher_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pusher_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def pusher_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def pusher_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pusher_id_previous_change; end

    sig { returns(T::Boolean) }
    def pusher_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def pusher_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pusher_id_was; end

    sig { void }
    def pusher_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def required_ruby_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def required_ruby_version=(value); end

    sig { returns(T::Boolean) }
    def required_ruby_version?; end

    sig { returns(T.nilable(::String)) }
    def required_ruby_version_before_last_save; end

    sig { returns(T.untyped) }
    def required_ruby_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def required_ruby_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def required_ruby_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def required_ruby_version_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def required_ruby_version_changed?; end

    sig { returns(T.nilable(::String)) }
    def required_ruby_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def required_ruby_version_previous_change; end

    sig { returns(T::Boolean) }
    def required_ruby_version_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def required_ruby_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def required_ruby_version_was; end

    sig { void }
    def required_ruby_version_will_change!; end

    sig { returns(T.nilable(::String)) }
    def required_rubygems_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def required_rubygems_version=(value); end

    sig { returns(T::Boolean) }
    def required_rubygems_version?; end

    sig { returns(T.nilable(::String)) }
    def required_rubygems_version_before_last_save; end

    sig { returns(T.untyped) }
    def required_rubygems_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def required_rubygems_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def required_rubygems_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def required_rubygems_version_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def required_rubygems_version_changed?; end

    sig { returns(T.nilable(::String)) }
    def required_rubygems_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def required_rubygems_version_previous_change; end

    sig { returns(T::Boolean) }
    def required_rubygems_version_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def required_rubygems_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def required_rubygems_version_was; end

    sig { void }
    def required_rubygems_version_will_change!; end

    sig { returns(T.untyped) }
    def requirements; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def requirements=(value); end

    sig { returns(T::Boolean) }
    def requirements?; end

    sig { returns(T.untyped) }
    def requirements_before_last_save; end

    sig { returns(T.untyped) }
    def requirements_before_type_cast; end

    sig { returns(T::Boolean) }
    def requirements_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def requirements_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def requirements_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def requirements_changed?; end

    sig { returns(T.untyped) }
    def requirements_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def requirements_previous_change; end

    sig { returns(T::Boolean) }
    def requirements_previously_changed?; end

    sig { returns(T.untyped) }
    def requirements_previously_was; end

    sig { returns(T.untyped) }
    def requirements_was; end

    sig { void }
    def requirements_will_change!; end

    sig { void }
    def restore_authors!; end

    sig { void }
    def restore_built_at!; end

    sig { void }
    def restore_canonical_number!; end

    sig { void }
    def restore_cert_chain!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_full_name!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_indexed!; end

    sig { void }
    def restore_info_checksum!; end

    sig { void }
    def restore_latest!; end

    sig { void }
    def restore_licenses!; end

    sig { void }
    def restore_metadata!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_platform!; end

    sig { void }
    def restore_position!; end

    sig { void }
    def restore_prerelease!; end

    sig { void }
    def restore_pusher_id!; end

    sig { void }
    def restore_required_ruby_version!; end

    sig { void }
    def restore_required_rubygems_version!; end

    sig { void }
    def restore_requirements!; end

    sig { void }
    def restore_rubygem_id!; end

    sig { void }
    def restore_sha256!; end

    sig { void }
    def restore_size!; end

    sig { void }
    def restore_summary!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_yanked_at!; end

    sig { void }
    def restore_yanked_info_checksum!; end

    sig { returns(T.nilable(::Integer)) }
    def rubygem_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def rubygem_id=(value); end

    sig { returns(T::Boolean) }
    def rubygem_id?; end

    sig { returns(T.nilable(::Integer)) }
    def rubygem_id_before_last_save; end

    sig { returns(T.untyped) }
    def rubygem_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def rubygem_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rubygem_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rubygem_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def rubygem_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rubygem_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rubygem_id_previous_change; end

    sig { returns(T::Boolean) }
    def rubygem_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rubygem_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def rubygem_id_was; end

    sig { void }
    def rubygem_id_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_authors; end

    sig { returns(T::Boolean) }
    def saved_change_to_authors?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_built_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_built_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_canonical_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_canonical_number?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_cert_chain; end

    sig { returns(T::Boolean) }
    def saved_change_to_cert_chain?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_full_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_full_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_indexed; end

    sig { returns(T::Boolean) }
    def saved_change_to_indexed?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_info_checksum; end

    sig { returns(T::Boolean) }
    def saved_change_to_info_checksum?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_latest; end

    sig { returns(T::Boolean) }
    def saved_change_to_latest?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_licenses; end

    sig { returns(T::Boolean) }
    def saved_change_to_licenses?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_metadata; end

    sig { returns(T::Boolean) }
    def saved_change_to_metadata?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_platform; end

    sig { returns(T::Boolean) }
    def saved_change_to_platform?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_position; end

    sig { returns(T::Boolean) }
    def saved_change_to_position?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_prerelease; end

    sig { returns(T::Boolean) }
    def saved_change_to_prerelease?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_pusher_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_pusher_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_required_ruby_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_required_ruby_version?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_required_rubygems_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_required_rubygems_version?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_requirements; end

    sig { returns(T::Boolean) }
    def saved_change_to_requirements?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_rubygem_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_rubygem_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_sha256; end

    sig { returns(T::Boolean) }
    def saved_change_to_sha256?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_size; end

    sig { returns(T::Boolean) }
    def saved_change_to_size?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_summary; end

    sig { returns(T::Boolean) }
    def saved_change_to_summary?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_yanked_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_yanked_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_yanked_info_checksum; end

    sig { returns(T::Boolean) }
    def saved_change_to_yanked_info_checksum?; end

    sig { returns(T.nilable(::String)) }
    def sha256; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def sha256=(value); end

    sig { returns(T::Boolean) }
    def sha256?; end

    sig { returns(T.nilable(::String)) }
    def sha256_before_last_save; end

    sig { returns(T.untyped) }
    def sha256_before_type_cast; end

    sig { returns(T::Boolean) }
    def sha256_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sha256_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sha256_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def sha256_changed?; end

    sig { returns(T.nilable(::String)) }
    def sha256_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sha256_previous_change; end

    sig { returns(T::Boolean) }
    def sha256_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def sha256_previously_was; end

    sig { returns(T.nilable(::String)) }
    def sha256_was; end

    sig { void }
    def sha256_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def size; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def size=(value); end

    sig { returns(T::Boolean) }
    def size?; end

    sig { returns(T.nilable(::Integer)) }
    def size_before_last_save; end

    sig { returns(T.untyped) }
    def size_before_type_cast; end

    sig { returns(T::Boolean) }
    def size_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def size_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def size_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_previous_change; end

    sig { returns(T::Boolean) }
    def size_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def size_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def size_was; end

    sig { void }
    def size_will_change!; end

    sig { returns(T.nilable(::String)) }
    def summary; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def summary=(value); end

    sig { returns(T::Boolean) }
    def summary?; end

    sig { returns(T.nilable(::String)) }
    def summary_before_last_save; end

    sig { returns(T.untyped) }
    def summary_before_type_cast; end

    sig { returns(T::Boolean) }
    def summary_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def summary_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def summary_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def summary_changed?; end

    sig { returns(T.nilable(::String)) }
    def summary_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def summary_previous_change; end

    sig { returns(T::Boolean) }
    def summary_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def summary_previously_was; end

    sig { returns(T.nilable(::String)) }
    def summary_was; end

    sig { void }
    def summary_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_authors?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_built_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_canonical_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cert_chain?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_full_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_indexed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_info_checksum?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latest?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_licenses?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metadata?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_platform?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_position?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prerelease?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pusher_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_required_ruby_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_required_rubygems_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_requirements?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rubygem_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sha256?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_size?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_summary?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_yanked_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_yanked_info_checksum?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def yanked_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def yanked_at=(value); end

    sig { returns(T::Boolean) }
    def yanked_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def yanked_at_before_last_save; end

    sig { returns(T.untyped) }
    def yanked_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def yanked_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def yanked_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def yanked_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def yanked_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def yanked_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def yanked_at_previous_change; end

    sig { returns(T::Boolean) }
    def yanked_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def yanked_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def yanked_at_was; end

    sig { void }
    def yanked_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def yanked_info_checksum; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def yanked_info_checksum=(value); end

    sig { returns(T::Boolean) }
    def yanked_info_checksum?; end

    sig { returns(T.nilable(::String)) }
    def yanked_info_checksum_before_last_save; end

    sig { returns(T.untyped) }
    def yanked_info_checksum_before_type_cast; end

    sig { returns(T::Boolean) }
    def yanked_info_checksum_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def yanked_info_checksum_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def yanked_info_checksum_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def yanked_info_checksum_changed?; end

    sig { returns(T.nilable(::String)) }
    def yanked_info_checksum_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def yanked_info_checksum_previous_change; end

    sig { returns(T::Boolean) }
    def yanked_info_checksum_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def yanked_info_checksum_previously_was; end

    sig { returns(T.nilable(::String)) }
    def yanked_info_checksum_was; end

    sig { void }
    def yanked_info_checksum_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Version } }

    sig { returns(T::Array[::Version]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Version } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Version } }

    sig do
      params(
        records: T.any(::Version, T::Enumerable[T.any(::Version, T::Enumerable[::Version])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Version, T::Enumerable[T.any(::Version, T::Enumerable[::Version])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Version, T::Enumerable[T.any(::Version, T::Enumerable[::Version])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Version, Integer, String, T::Enumerable[T.any(::Version, Integer, String, T::Enumerable[::Version])])
      ).returns(T::Array[::Version])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Version, Integer, String, T::Enumerable[T.any(::Version, Integer, String, T::Enumerable[::Version])])
      ).returns(T::Array[::Version])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Version]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Version, T::Enumerable[T.any(::Version, T::Enumerable[::Version])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Version, T::Enumerable[T.any(::Version, T::Enumerable[::Version])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Version, T::Enumerable[T.any(::Version, T::Enumerable[::Version])])
      ).returns(T::Array[::Version])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Version]) }
    def target; end

    sig { returns(T::Array[::Version]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Version } }

    sig { returns(T::Array[::Version]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Version } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
