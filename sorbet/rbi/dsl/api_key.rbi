# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ApiKey`.
# Please instead update this file by running `bin/tapioca dsl ApiKey`.

class ApiKey
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::ApiKey).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ApiKey]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ApiKey)) }
    def fifth; end

    sig { returns(::ApiKey) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::ApiKey)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ApiKey) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def find_or_initialize_by(attributes, &block); end

    sig { returns(T.nilable(::ApiKey)) }
    def find_sole_by; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::ApiKey) }
    def first!; end

    sig { returns(T.nilable(::ApiKey)) }
    def forty_two; end

    sig { returns(::ApiKey) }
    def forty_two!; end

    sig { returns(T.nilable(::ApiKey)) }
    def fourth; end

    sig { returns(::ApiKey) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::ApiKey) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::ApiKey).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::ApiKey).void)).returns(::ApiKey) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ApiKey).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ApiKey).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ApiKey)) }
    def second; end

    sig { returns(::ApiKey) }
    def second!; end

    sig { returns(T.nilable(::ApiKey)) }
    def second_to_last; end

    sig { returns(::ApiKey) }
    def second_to_last!; end

    sig { returns(T.nilable(::ApiKey)) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::ApiKey) }
    def take!; end

    sig { returns(T.nilable(::ApiKey)) }
    def third; end

    sig { returns(::ApiKey) }
    def third!; end

    sig { returns(T.nilable(::ApiKey)) }
    def third_to_last; end

    sig { returns(::ApiKey) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def access_webhooks; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def access_webhooks=(value); end

    sig { returns(T::Boolean) }
    def access_webhooks?; end

    sig { returns(T.nilable(T::Boolean)) }
    def access_webhooks_before_last_save; end

    sig { returns(T.untyped) }
    def access_webhooks_before_type_cast; end

    sig { returns(T::Boolean) }
    def access_webhooks_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def access_webhooks_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def access_webhooks_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def access_webhooks_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def access_webhooks_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def access_webhooks_previous_change; end

    sig { returns(T::Boolean) }
    def access_webhooks_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def access_webhooks_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def access_webhooks_was; end

    sig { void }
    def access_webhooks_will_change!; end

    sig { returns(T::Boolean) }
    def add_owner; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def add_owner=(value); end

    sig { returns(T::Boolean) }
    def add_owner?; end

    sig { returns(T.nilable(T::Boolean)) }
    def add_owner_before_last_save; end

    sig { returns(T.untyped) }
    def add_owner_before_type_cast; end

    sig { returns(T::Boolean) }
    def add_owner_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def add_owner_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def add_owner_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def add_owner_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def add_owner_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def add_owner_previous_change; end

    sig { returns(T::Boolean) }
    def add_owner_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def add_owner_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def add_owner_was; end

    sig { void }
    def add_owner_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def hashed_key; end

    sig { params(value: ::String).returns(::String) }
    def hashed_key=(value); end

    sig { returns(T::Boolean) }
    def hashed_key?; end

    sig { returns(T.nilable(::String)) }
    def hashed_key_before_last_save; end

    sig { returns(T.untyped) }
    def hashed_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def hashed_key_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def hashed_key_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def hashed_key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def hashed_key_changed?; end

    sig { returns(T.nilable(::String)) }
    def hashed_key_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def hashed_key_previous_change; end

    sig { returns(T::Boolean) }
    def hashed_key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def hashed_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def hashed_key_was; end

    sig { void }
    def hashed_key_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def index_rubygems; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def index_rubygems=(value); end

    sig { returns(T::Boolean) }
    def index_rubygems?; end

    sig { returns(T.nilable(T::Boolean)) }
    def index_rubygems_before_last_save; end

    sig { returns(T.untyped) }
    def index_rubygems_before_type_cast; end

    sig { returns(T::Boolean) }
    def index_rubygems_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def index_rubygems_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def index_rubygems_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def index_rubygems_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def index_rubygems_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def index_rubygems_previous_change; end

    sig { returns(T::Boolean) }
    def index_rubygems_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def index_rubygems_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def index_rubygems_was; end

    sig { void }
    def index_rubygems_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_accessed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_accessed_at=(value); end

    sig { returns(T::Boolean) }
    def last_accessed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_accessed_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_accessed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_accessed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_accessed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_accessed_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_accessed_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_accessed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_accessed_at_previous_change; end

    sig { returns(T::Boolean) }
    def last_accessed_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_accessed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_accessed_at_was; end

    sig { void }
    def last_accessed_at_will_change!; end

    sig { returns(T::Boolean) }
    def mfa; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def mfa=(value); end

    sig { returns(T::Boolean) }
    def mfa?; end

    sig { returns(T.nilable(T::Boolean)) }
    def mfa_before_last_save; end

    sig { returns(T.untyped) }
    def mfa_before_type_cast; end

    sig { returns(T::Boolean) }
    def mfa_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def mfa_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def mfa_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mfa_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def mfa_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def mfa_previous_change; end

    sig { returns(T::Boolean) }
    def mfa_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def mfa_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def mfa_was; end

    sig { void }
    def mfa_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T::Boolean) }
    def push_rubygem; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def push_rubygem=(value); end

    sig { returns(T::Boolean) }
    def push_rubygem?; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_rubygem_before_last_save; end

    sig { returns(T.untyped) }
    def push_rubygem_before_type_cast; end

    sig { returns(T::Boolean) }
    def push_rubygem_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def push_rubygem_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def push_rubygem_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def push_rubygem_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_rubygem_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def push_rubygem_previous_change; end

    sig { returns(T::Boolean) }
    def push_rubygem_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_rubygem_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_rubygem_was; end

    sig { void }
    def push_rubygem_will_change!; end

    sig { returns(T::Boolean) }
    def remove_owner; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def remove_owner=(value); end

    sig { returns(T::Boolean) }
    def remove_owner?; end

    sig { returns(T.nilable(T::Boolean)) }
    def remove_owner_before_last_save; end

    sig { returns(T.untyped) }
    def remove_owner_before_type_cast; end

    sig { returns(T::Boolean) }
    def remove_owner_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def remove_owner_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def remove_owner_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remove_owner_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def remove_owner_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def remove_owner_previous_change; end

    sig { returns(T::Boolean) }
    def remove_owner_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def remove_owner_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def remove_owner_was; end

    sig { void }
    def remove_owner_will_change!; end

    sig { void }
    def restore_access_webhooks!; end

    sig { void }
    def restore_add_owner!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_hashed_key!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_index_rubygems!; end

    sig { void }
    def restore_last_accessed_at!; end

    sig { void }
    def restore_mfa!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_push_rubygem!; end

    sig { void }
    def restore_remove_owner!; end

    sig { void }
    def restore_show_dashboard!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_yank_rubygem!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_access_webhooks; end

    sig { returns(T::Boolean) }
    def saved_change_to_access_webhooks?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_add_owner; end

    sig { returns(T::Boolean) }
    def saved_change_to_add_owner?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_hashed_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_hashed_key?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_index_rubygems; end

    sig { returns(T::Boolean) }
    def saved_change_to_index_rubygems?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_accessed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_accessed_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_mfa; end

    sig { returns(T::Boolean) }
    def saved_change_to_mfa?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_push_rubygem; end

    sig { returns(T::Boolean) }
    def saved_change_to_push_rubygem?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_remove_owner; end

    sig { returns(T::Boolean) }
    def saved_change_to_remove_owner?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_show_dashboard; end

    sig { returns(T::Boolean) }
    def saved_change_to_show_dashboard?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_yank_rubygem; end

    sig { returns(T::Boolean) }
    def saved_change_to_yank_rubygem?; end

    sig { returns(T::Boolean) }
    def show_dashboard; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def show_dashboard=(value); end

    sig { returns(T::Boolean) }
    def show_dashboard?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_dashboard_before_last_save; end

    sig { returns(T.untyped) }
    def show_dashboard_before_type_cast; end

    sig { returns(T::Boolean) }
    def show_dashboard_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def show_dashboard_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def show_dashboard_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def show_dashboard_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_dashboard_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def show_dashboard_previous_change; end

    sig { returns(T::Boolean) }
    def show_dashboard_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_dashboard_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_dashboard_was; end

    sig { void }
    def show_dashboard_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def user_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { returns(T::Boolean) }
    def user_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_access_webhooks?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_add_owner?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hashed_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_index_rubygems?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_accessed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mfa?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_push_rubygem?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remove_owner?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_show_dashboard?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_yank_rubygem?; end

    sig { returns(T::Boolean) }
    def yank_rubygem; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def yank_rubygem=(value); end

    sig { returns(T::Boolean) }
    def yank_rubygem?; end

    sig { returns(T.nilable(T::Boolean)) }
    def yank_rubygem_before_last_save; end

    sig { returns(T.untyped) }
    def yank_rubygem_before_type_cast; end

    sig { returns(T::Boolean) }
    def yank_rubygem_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def yank_rubygem_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def yank_rubygem_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def yank_rubygem_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def yank_rubygem_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def yank_rubygem_previous_change; end

    sig { returns(T::Boolean) }
    def yank_rubygem_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def yank_rubygem_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def yank_rubygem_was; end

    sig { void }
    def yank_rubygem_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ApiKey } }

    sig { returns(T::Array[::ApiKey]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ApiKey } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ApiKey } }

    sig do
      params(
        records: T.any(::ApiKey, T::Enumerable[T.any(::ApiKey, T::Enumerable[::ApiKey])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ApiKey, T::Enumerable[T.any(::ApiKey, T::Enumerable[::ApiKey])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ApiKey, T::Enumerable[T.any(::ApiKey, T::Enumerable[::ApiKey])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::ApiKey, Integer, String, T::Enumerable[T.any(::ApiKey, Integer, String, T::Enumerable[::ApiKey])])
      ).returns(T::Array[::ApiKey])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::ApiKey, Integer, String, T::Enumerable[T.any(::ApiKey, Integer, String, T::Enumerable[::ApiKey])])
      ).returns(T::Array[::ApiKey])
    end
    def destroy(*records); end

    sig { returns(T::Array[::ApiKey]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ApiKey, T::Enumerable[T.any(::ApiKey, T::Enumerable[::ApiKey])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ApiKey, T::Enumerable[T.any(::ApiKey, T::Enumerable[::ApiKey])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ApiKey, T::Enumerable[T.any(::ApiKey, T::Enumerable[::ApiKey])])
      ).returns(T::Array[::ApiKey])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ApiKey]) }
    def target; end

    sig { returns(T::Array[::ApiKey]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ApiKey } }

    sig { returns(T::Array[::ApiKey]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::ApiKey } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
