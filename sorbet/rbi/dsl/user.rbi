# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.

class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def mfa_levels; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { returns(T.nilable(::User)) }
    def find_sole_by; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(T.nilable(::User)) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def mfa_disabled!; end

    sig { returns(T::Boolean) }
    def mfa_disabled?; end

    sig { void }
    def mfa_ui_and_api!; end

    sig { returns(T::Boolean) }
    def mfa_ui_and_api?; end

    sig { void }
    def mfa_ui_and_gem_signin!; end

    sig { returns(T::Boolean) }
    def mfa_ui_and_gem_signin?; end

    sig { void }
    def mfa_ui_only!; end

    sig { returns(T::Boolean) }
    def mfa_ui_only?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def api_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def api_key_ids=(ids); end

    sig { returns(::ApiKey::PrivateCollectionProxy) }
    def api_keys; end

    sig { params(value: T::Enumerable[::ApiKey]).void }
    def api_keys=(value); end

    sig { returns(T::Array[T.untyped]) }
    def deletion_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def deletion_ids=(ids); end

    sig { returns(::Deletion::PrivateCollectionProxy) }
    def deletions; end

    sig { params(value: T::Enumerable[::Deletion]).void }
    def deletions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ownership_call_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ownership_call_ids=(ids); end

    sig { returns(::OwnershipCall::PrivateCollectionProxy) }
    def ownership_calls; end

    sig { params(value: T::Enumerable[::OwnershipCall]).void }
    def ownership_calls=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ownership_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ownership_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def ownership_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ownership_request_ids=(ids); end

    sig { returns(::OwnershipRequest::PrivateCollectionProxy) }
    def ownership_requests; end

    sig { params(value: T::Enumerable[::OwnershipRequest]).void }
    def ownership_requests=(value); end

    sig { returns(::Ownership::PrivateCollectionProxy) }
    def ownerships; end

    sig { params(value: T::Enumerable[::Ownership]).void }
    def ownerships=(value); end

    sig { returns(T::Array[T.untyped]) }
    def rubygem_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def rubygem_ids=(ids); end

    sig { returns(::Rubygem::PrivateCollectionProxy) }
    def rubygems; end

    sig { params(value: T::Enumerable[::Rubygem]).void }
    def rubygems=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscribed_gem_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscribed_gem_ids=(ids); end

    sig { returns(::Rubygem::PrivateCollectionProxy) }
    def subscribed_gems; end

    sig { params(value: T::Enumerable[::Rubygem]).void }
    def subscribed_gems=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_ids=(ids); end

    sig { returns(::Subscription::PrivateCollectionProxy) }
    def subscriptions; end

    sig { params(value: T::Enumerable[::Subscription]).void }
    def subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def unconfirmed_ownership_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def unconfirmed_ownership_ids=(ids); end

    sig { returns(::Ownership::PrivateCollectionProxy) }
    def unconfirmed_ownerships; end

    sig { params(value: T::Enumerable[::Ownership]).void }
    def unconfirmed_ownerships=(value); end

    sig { returns(T::Array[T.untyped]) }
    def web_hook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def web_hook_ids=(ids); end

    sig { returns(::WebHook::PrivateCollectionProxy) }
    def web_hooks; end

    sig { params(value: T::Enumerable[::WebHook]).void }
    def web_hooks=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mfa_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mfa_ui_and_api(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mfa_ui_and_gem_signin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mfa_ui_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mfa_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mfa_ui_and_api(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mfa_ui_and_gem_signin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mfa_ui_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def api_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def api_key=(value); end

    sig { returns(T::Boolean) }
    def api_key?; end

    sig { returns(T.nilable(::String)) }
    def api_key_before_last_save; end

    sig { returns(T.untyped) }
    def api_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def api_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def api_key_changed?; end

    sig { returns(T.nilable(::String)) }
    def api_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_previous_change; end

    sig { returns(T::Boolean) }
    def api_key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def api_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def api_key_was; end

    sig { void }
    def api_key_will_change!; end

    sig { returns(T.nilable(::String)) }
    def blocked_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def blocked_email=(value); end

    sig { returns(T::Boolean) }
    def blocked_email?; end

    sig { returns(T.nilable(::String)) }
    def blocked_email_before_last_save; end

    sig { returns(T.untyped) }
    def blocked_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def blocked_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blocked_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blocked_email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def blocked_email_changed?; end

    sig { returns(T.nilable(::String)) }
    def blocked_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blocked_email_previous_change; end

    sig { returns(T::Boolean) }
    def blocked_email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def blocked_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def blocked_email_was; end

    sig { void }
    def blocked_email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def confirmation_token=(value); end

    sig { returns(T::Boolean) }
    def confirmation_token?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_before_last_save; end

    sig { returns(T.untyped) }
    def confirmation_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmation_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def confirmation_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_previous_change; end

    sig { returns(T::Boolean) }
    def confirmation_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_was; end

    sig { void }
    def confirmation_token_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T::Boolean) }
    def email_confirmed; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def email_confirmed=(value); end

    sig { returns(T::Boolean) }
    def email_confirmed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_confirmed_before_last_save; end

    sig { returns(T.untyped) }
    def email_confirmed_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_confirmed_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def email_confirmed_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def email_confirmed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_confirmed_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_confirmed_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def email_confirmed_previous_change; end

    sig { returns(T::Boolean) }
    def email_confirmed_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_confirmed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_confirmed_was; end

    sig { void }
    def email_confirmed_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_reset; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def email_reset=(value); end

    sig { returns(T::Boolean) }
    def email_reset?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_reset_before_last_save; end

    sig { returns(T.untyped) }
    def email_reset_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_reset_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_reset_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_reset_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_reset_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_reset_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_reset_previous_change; end

    sig { returns(T::Boolean) }
    def email_reset_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_reset_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_reset_was; end

    sig { void }
    def email_reset_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def encrypted_password=(value); end

    sig { returns(T::Boolean) }
    def encrypted_password?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_password_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_password_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def encrypted_password_changed?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_previous_change; end

    sig { returns(T::Boolean) }
    def encrypted_password_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_was; end

    sig { void }
    def encrypted_password_will_change!; end

    sig { returns(T.nilable(::String)) }
    def handle; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def handle=(value); end

    sig { returns(T::Boolean) }
    def handle?; end

    sig { returns(T.nilable(::String)) }
    def handle_before_last_save; end

    sig { returns(T.untyped) }
    def handle_before_type_cast; end

    sig { returns(T::Boolean) }
    def handle_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def handle_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def handle_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def handle_changed?; end

    sig { returns(T.nilable(::String)) }
    def handle_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def handle_previous_change; end

    sig { returns(T::Boolean) }
    def handle_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def handle_previously_was; end

    sig { returns(T.nilable(::String)) }
    def handle_was; end

    sig { void }
    def handle_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_email; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def hide_email=(value); end

    sig { returns(T::Boolean) }
    def hide_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_email_before_last_save; end

    sig { returns(T.untyped) }
    def hide_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def hide_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_email_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def hide_email_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_email_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_email_previous_change; end

    sig { returns(T::Boolean) }
    def hide_email_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_email_was; end

    sig { void }
    def hide_email_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def mail_fails; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def mail_fails=(value); end

    sig { returns(T::Boolean) }
    def mail_fails?; end

    sig { returns(T.nilable(::Integer)) }
    def mail_fails_before_last_save; end

    sig { returns(T.untyped) }
    def mail_fails_before_type_cast; end

    sig { returns(T::Boolean) }
    def mail_fails_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def mail_fails_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def mail_fails_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mail_fails_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def mail_fails_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def mail_fails_previous_change; end

    sig { returns(T::Boolean) }
    def mail_fails_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def mail_fails_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def mail_fails_was; end

    sig { void }
    def mail_fails_will_change!; end

    sig { returns(T.untyped) }
    def mfa_level; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def mfa_level=(value); end

    sig { returns(T::Boolean) }
    def mfa_level?; end

    sig { returns(T.untyped) }
    def mfa_level_before_last_save; end

    sig { returns(T.untyped) }
    def mfa_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def mfa_level_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def mfa_level_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def mfa_level_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mfa_level_changed?; end

    sig { returns(T.untyped) }
    def mfa_level_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def mfa_level_previous_change; end

    sig { returns(T::Boolean) }
    def mfa_level_previously_changed?; end

    sig { returns(T.untyped) }
    def mfa_level_previously_was; end

    sig { returns(T.untyped) }
    def mfa_level_was; end

    sig { void }
    def mfa_level_will_change!; end

    sig { returns(T.untyped) }
    def mfa_recovery_codes; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def mfa_recovery_codes=(value); end

    sig { returns(T::Boolean) }
    def mfa_recovery_codes?; end

    sig { returns(T.untyped) }
    def mfa_recovery_codes_before_last_save; end

    sig { returns(T.untyped) }
    def mfa_recovery_codes_before_type_cast; end

    sig { returns(T::Boolean) }
    def mfa_recovery_codes_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def mfa_recovery_codes_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def mfa_recovery_codes_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mfa_recovery_codes_changed?; end

    sig { returns(T.untyped) }
    def mfa_recovery_codes_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def mfa_recovery_codes_previous_change; end

    sig { returns(T::Boolean) }
    def mfa_recovery_codes_previously_changed?; end

    sig { returns(T.untyped) }
    def mfa_recovery_codes_previously_was; end

    sig { returns(T.untyped) }
    def mfa_recovery_codes_was; end

    sig { void }
    def mfa_recovery_codes_will_change!; end

    sig { returns(T.nilable(::String)) }
    def mfa_seed; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def mfa_seed=(value); end

    sig { returns(T::Boolean) }
    def mfa_seed?; end

    sig { returns(T.nilable(::String)) }
    def mfa_seed_before_last_save; end

    sig { returns(T.untyped) }
    def mfa_seed_before_type_cast; end

    sig { returns(T::Boolean) }
    def mfa_seed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mfa_seed_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mfa_seed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mfa_seed_changed?; end

    sig { returns(T.nilable(::String)) }
    def mfa_seed_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mfa_seed_previous_change; end

    sig { returns(T::Boolean) }
    def mfa_seed_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def mfa_seed_previously_was; end

    sig { returns(T.nilable(::String)) }
    def mfa_seed_was; end

    sig { void }
    def mfa_seed_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remember_token=(value); end

    sig { returns(T::Boolean) }
    def remember_token?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_before_last_save; end

    sig { returns(T.untyped) }
    def remember_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_token_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at=(value); end

    sig { returns(T::Boolean) }
    def remember_token_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_token_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_token_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_token_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_token_expires_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_token_expires_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_token_expires_at_previous_change; end

    sig { returns(T::Boolean) }
    def remember_token_expires_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_was; end

    sig { void }
    def remember_token_expires_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_previous_change; end

    sig { returns(T::Boolean) }
    def remember_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remember_token_was; end

    sig { void }
    def remember_token_will_change!; end

    sig { void }
    def restore_api_key!; end

    sig { void }
    def restore_blocked_email!; end

    sig { void }
    def restore_confirmation_token!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_email_confirmed!; end

    sig { void }
    def restore_email_reset!; end

    sig { void }
    def restore_encrypted_password!; end

    sig { void }
    def restore_handle!; end

    sig { void }
    def restore_hide_email!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_mail_fails!; end

    sig { void }
    def restore_mfa_level!; end

    sig { void }
    def restore_mfa_recovery_codes!; end

    sig { void }
    def restore_mfa_seed!; end

    sig { void }
    def restore_remember_token!; end

    sig { void }
    def restore_remember_token_expires_at!; end

    sig { void }
    def restore_salt!; end

    sig { void }
    def restore_token!; end

    sig { void }
    def restore_token_expires_at!; end

    sig { void }
    def restore_twitter_username!; end

    sig { void }
    def restore_unconfirmed_email!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable(::String)) }
    def salt; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def salt=(value); end

    sig { returns(T::Boolean) }
    def salt?; end

    sig { returns(T.nilable(::String)) }
    def salt_before_last_save; end

    sig { returns(T.untyped) }
    def salt_before_type_cast; end

    sig { returns(T::Boolean) }
    def salt_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def salt_changed?; end

    sig { returns(T.nilable(::String)) }
    def salt_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_previous_change; end

    sig { returns(T::Boolean) }
    def salt_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def salt_previously_was; end

    sig { returns(T.nilable(::String)) }
    def salt_was; end

    sig { void }
    def salt_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_api_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_api_key?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_blocked_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_blocked_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_confirmation_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmation_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_email_confirmed; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_confirmed?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_email_reset; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_reset?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_encrypted_password; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_password?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_handle; end

    sig { returns(T::Boolean) }
    def saved_change_to_handle?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_hide_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_hide_email?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_mail_fails; end

    sig { returns(T::Boolean) }
    def saved_change_to_mail_fails?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_mfa_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_mfa_level?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_mfa_recovery_codes; end

    sig { returns(T::Boolean) }
    def saved_change_to_mfa_recovery_codes?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_mfa_seed; end

    sig { returns(T::Boolean) }
    def saved_change_to_mfa_seed?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remember_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_token_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_token_expires_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_salt; end

    sig { returns(T::Boolean) }
    def saved_change_to_salt?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_token_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_token_expires_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_twitter_username; end

    sig { returns(T::Boolean) }
    def saved_change_to_twitter_username?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_unconfirmed_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_unconfirmed_email?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def token=(value); end

    sig { returns(T::Boolean) }
    def token?; end

    sig { returns(T.nilable(::String)) }
    def token_before_last_save; end

    sig { returns(T.untyped) }
    def token_before_type_cast; end

    sig { returns(T::Boolean) }
    def token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def token_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def token_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def token_expires_at=(value); end

    sig { returns(T::Boolean) }
    def token_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def token_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def token_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def token_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def token_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def token_expires_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def token_expires_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def token_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def token_expires_at_previous_change; end

    sig { returns(T::Boolean) }
    def token_expires_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def token_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def token_expires_at_was; end

    sig { void }
    def token_expires_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_previous_change; end

    sig { returns(T::Boolean) }
    def token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def token_was; end

    sig { void }
    def token_will_change!; end

    sig { returns(T.nilable(::String)) }
    def twitter_username; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def twitter_username=(value); end

    sig { returns(T::Boolean) }
    def twitter_username?; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_before_last_save; end

    sig { returns(T.untyped) }
    def twitter_username_before_type_cast; end

    sig { returns(T::Boolean) }
    def twitter_username_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def twitter_username_changed?; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_previous_change; end

    sig { returns(T::Boolean) }
    def twitter_username_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_previously_was; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_was; end

    sig { void }
    def twitter_username_will_change!; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def unconfirmed_email=(value); end

    sig { returns(T::Boolean) }
    def unconfirmed_email?; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_before_last_save; end

    sig { returns(T.untyped) }
    def unconfirmed_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def unconfirmed_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def unconfirmed_email_changed?; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_previous_change; end

    sig { returns(T::Boolean) }
    def unconfirmed_email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_was; end

    sig { void }
    def unconfirmed_email_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_api_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_blocked_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmation_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_confirmed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_reset?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_password?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_handle?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hide_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mail_fails?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mfa_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mfa_recovery_codes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mfa_seed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_token_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_salt?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_token_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_twitter_username?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unconfirmed_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mfa_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mfa_ui_and_api(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mfa_ui_and_gem_signin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mfa_ui_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mfa_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mfa_ui_and_api(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mfa_ui_and_gem_signin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mfa_ui_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
