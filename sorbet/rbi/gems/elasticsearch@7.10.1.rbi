# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elasticsearch` gem.
# Please instead update this file by running `bin/tapioca gem elasticsearch`.

module Elasticsearch; end
module Elasticsearch::Transport; end

# Handles communication with an Elasticsearch cluster.
#
# See {file:README.md README} for usage and code examples.
class Elasticsearch::Transport::Client
  include ::Elasticsearch::API
  include ::Elasticsearch::API::DanglingIndices
  include ::Elasticsearch::API::Remote
  include ::Elasticsearch::API::Cat
  include ::Elasticsearch::API::Tasks
  include ::Elasticsearch::API::Snapshot
  include ::Elasticsearch::API::Ingest
  include ::Elasticsearch::API::Indices
  include ::Elasticsearch::API::Nodes
  include ::Elasticsearch::API::Cluster
  include ::Elasticsearch::API::Actions
  include ::Elasticsearch::API::Common

  # Create a client connected to an Elasticsearch cluster.
  #
  # Specify the URL via arguments or set the `ELASTICSEARCH_URL` environment variable.
  #
  # will be prepended to the id you set before each request if you're using X-Opaque-Id
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option api_key
  # @option opaque_id_prefix
  # @param arguments [Hash] a customizable set of options
  # @param api_key [Hash] a customizable set of options
  # @param opaque_id_prefix [Hash] a customizable set of options
  # @return [Client] a new instance of Client
  # @yield [faraday] Access and configure the `Faraday::Connection` instance directly with a block
  def initialize(arguments = T.unsafe(nil), &block); end

  # Performs a request through delegation to {#transport}.
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Returns the transport object.
  #
  # @see Elasticsearch::Transport::Transport::Base
  # @see Elasticsearch::Transport::Transport::HTTP::Faraday
  def transport; end

  # Returns the transport object.
  #
  # @see Elasticsearch::Transport::Transport::Base
  # @see Elasticsearch::Transport::Transport::HTTP::Faraday
  def transport=(_arg0); end

  private

  # Auto-detect the best adapter (HTTP "driver") available, based on libraries
  # loaded by the user, preferring those with persistent connections
  # ("keep-alive") by default
  #
  # @api private
  # @return [Symbol]
  def __auto_detect_adapter; end

  # Encode credentials for the Authorization Header
  # Credentials is the base64 encoding of id and api_key joined by a colon
  #
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html
  def __encode(api_key); end

  # Normalizes and returns hosts configuration.
  #
  # Arrayifies the `hosts_config` argument and extracts `host` and `port` info from strings.
  # Performs shuffling when the `randomize_hosts` option is set.
  #
  # TODO: Refactor, so it's available in Elasticsearch::Transport::Base as well
  #
  # @api private
  # @raise [ArgumentError]
  # @return [Array<Hash>]
  def __extract_hosts(hosts_config); end

  def __parse_host(host); end
  def extract_cloud_creds(arguments); end
  def set_api_key; end
end

# The default port to use if connecting using a Cloud ID.
# Updated from 9243 to 443 in client version 7.10.1
#
# @since 7.2.0
Elasticsearch::Transport::Client::DEFAULT_CLOUD_PORT = T.let(T.unsafe(nil), Integer)

# The default host and port to use if not otherwise specified.
#
# @since 7.0.0
Elasticsearch::Transport::Client::DEFAULT_HOST = T.let(T.unsafe(nil), String)

Elasticsearch::Transport::Client::DEFAULT_LOGGER = T.let(T.unsafe(nil), Proc)

# The default port to use if not otherwise specified.
#
# @since 7.2.0
Elasticsearch::Transport::Client::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

Elasticsearch::Transport::Client::DEFAULT_TRACER = T.let(T.unsafe(nil), Proc)
Elasticsearch::Transport::Client::DEFAULT_TRANSPORT_CLASS = Elasticsearch::Transport::Transport::HTTP::Faraday
Elasticsearch::Transport::VERSION = T.let(T.unsafe(nil), String)
Elasticsearch::VERSION = T.let(T.unsafe(nil), String)
