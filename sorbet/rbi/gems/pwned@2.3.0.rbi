# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pwned` gem.
# Please instead update this file by running `bin/tapioca gem pwned`.

# An +ActiveModel+ validator to check passwords against the Pwned Passwords API.
#
# @example Validate a password on a +User+ model with the default options.
#   class User < ApplicationRecord
#   validates :password, not_pwned: true
#   end
# @example Validate a password on a +User+ model with a custom error message.
#   class User < ApplicationRecord
#   validates :password, not_pwned: { message: "has been pwned %{count} times" }
#   end
# @example Validate a password on a +User+ model that allows the password to have been breached once.
#   class User < ApplicationRecord
#   validates :password, not_pwned: { threshold: 1 }
#   end
# @example Validate a password on a +User+ model, handling API errors in various ways
#   class User < ApplicationRecord
#   # The record is marked as invalid on network errors
#   # (error message "could not be verified against the past data breaches".)
#   validates :password, not_pwned: { on_error: :invalid }
#
#   # The record is marked as invalid on network errors with custom error.
#   validates :password, not_pwned: { on_error: :invalid, error_message: "might be pwned" }
#
#   # An error is raised on network errors.
#   # This means that `record.valid?` will raise `Pwned::Error`.
#   # Not recommended to use in production.
#   validates :password, not_pwned: { on_error: :raise_error }
#
#   # Call custom proc on error. For example, capture errors in Sentry,
#   # but do not mark the record as invalid.
#   validates :password, not_pwned: {
#   on_error: ->(record, error) { Raven.capture_exception(error) }
#   }
#   end
# @since 1.2.0
class NotPwnedValidator < ::ActiveModel::EachValidator
  # Validates the +value+ against the Pwned Passwords API. If the +pwned_count+
  # is higher than the optional +threshold+ then the record is marked as
  # invalid.
  #
  # In the case of an API error the validator will either mark the
  # record as valid or invalid. Alternatively it will run an associated proc or
  # re-raise the original error.
  #
  # The validation will short circuit and return with no errors added if the
  # password is blank. The +Pwned::Password+ initializer expects the password to
  # be a string and will throw a +TypeError+ if it is +nil+. Also, technically
  # the empty string is not a password that is reported to be found in data
  # breaches, so returns +false+, short circuiting that using +value.blank?+
  # saves us a trip to the API.
  #
  # @param record [ActiveModel::Validations] The object being validated
  # @param attribute [Symbol] The attribute on the record that is currently
  #   being validated.
  # @param value [String] The value of the attribute on the record that is the
  #   subject of the validation
  # @since 1.2.0
  def validate_each(record, attribute, value); end

  private

  # @since 1.2.0
  def on_error; end

  # @since 1.2.0
  def request_options; end

  # @raise [TypeError]
  # @since 1.2.0
  def threshold; end
end

# The default behaviour of this validator in the case of an API failure. The
# default will mean that if the API fails the object will not be marked
# invalid.
#
# @since 1.2.0
NotPwnedValidator::DEFAULT_ON_ERROR = T.let(T.unsafe(nil), Symbol)

# The default threshold for whether a breach is considered pwned. The default
# is 0, so any password that appears in a breach will mark the record as
# invalid.
#
# @since 1.2.0
NotPwnedValidator::DEFAULT_THRESHOLD = T.let(T.unsafe(nil), Integer)

# The main namespace for +Pwned+. Includes convenience methods for getting the
# results for a password.
module Pwned
  class << self
    # Returns the full SHA1 hash of the given password in uppercase. This can be safely passed around your code
    # before making the pwned request (e.g. dropped into a queue table).
    #
    # @example
    #   Pwned.hash_password("password") #=> 5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8
    # @param password [String] The password you want to check against the API
    # @return [String] An uppercase SHA1 hash of the password
    # @since 2.1.0
    def hash_password(password); end

    # Returns +true+ when the password has been pwned.
    #
    # @example
    #   Pwned.pwned?("password") #=> true
    #   Pwned.pwned?("pwned::password") #=> false
    # @option request_options
    # @option request_options
    # @param password [String] The password you want to check against the API.
    # @param request_options [Hash] Options that can be passed to +Net::HTTP.start+ when
    #   calling the API
    # @return [Boolean] Whether the password appears in the data breaches or not.
    # @since 1.1.0
    def pwned?(password, request_options = T.unsafe(nil)); end

    # Returns number of times the password has been pwned.
    #
    # @example
    #   Pwned.pwned_count("password") #=> 3303003
    #   Pwned.pwned_count("pwned::password") #=> 0
    # @option request_options
    # @option request_options
    # @param password [String] The password you want to check against the API.
    # @param request_options [Hash] Options that can be passed to +Net::HTTP.start+ when
    #   calling the API
    # @return [Integer] The number of times the password has appeared in the data
    #   breaches.
    # @since 1.1.0
    def pwned_count(password, request_options = T.unsafe(nil)); end
  end
end

# A base error for HTTP request errors that may be thrown when making requests
# to the Pwned Passwords API.
#
# @see Pwned::Password#pwned?
# @see Pwned::Password#pwned_count
class Pwned::Error < ::StandardError; end

# This class represents a hashed password. It does all the work of talking to the
# Pwned Passwords API to find out if the password has been pwned.
#
# @see https://haveibeenpwned.com/API/v2#PwnedPasswords
class Pwned::HashedPassword
  include ::Pwned::PasswordBase

  # Creates a new hashed password object.
  #
  # @example A simple password with the default request options
  #   password = Pwned::HashedPassword.new("ABC123")
  # @example Setting the user agent and the read timeout of the request
  #   password = Pwned::HashedPassword.new("ABC123", headers: { "User-Agent" => "My user agent" }, read_timout: 10)
  # @option request_options
  # @option request_options
  # @param hashed_password [String] The hash of the password you want to check against the API.
  # @param request_options [Hash] Options that can be passed to +Net::HTTP.start+ when
  #   calling the API
  # @raise [TypeError] if the password is not a string.
  # @return [HashedPassword] a new instance of HashedPassword
  # @since 2.1.0
  def initialize(hashed_password, request_options = T.unsafe(nil)); end
end

# This class represents a password. It does all the work of talking to the
# Pwned Passwords API to find out if the password has been pwned.
#
# @see https://haveibeenpwned.com/API/v2#PwnedPasswords
class Pwned::Password
  include ::Pwned::PasswordBase

  # Creates a new password object.
  #
  # @example A simple password with the default request options
  #   password = Pwned::Password.new("password")
  # @example Setting the user agent and the read timeout of the request
  #   password = Pwned::Password.new("password", headers: { "User-Agent" => "My user agent" }, read_timout: 10)
  # @option request_options
  # @option request_options
  # @param password [String] The password you want to check against the API.
  # @param request_options [Hash] Options that can be passed to +Net::HTTP.start+ when
  #   calling the API
  # @raise [TypeError] if the password is not a string.
  # @return [Password] a new instance of Password
  # @since 1.1.0
  def initialize(password, request_options = T.unsafe(nil)); end

  # @return [String] the password that is being checked.
  # @since 1.0.0
  def password; end
end

# This class represents a password. It does all the work of talking to the
# Pwned Passwords API to find out if the password has been pwned.
#
# @see https://haveibeenpwned.com/API/v2#PwnedPasswords
module Pwned::PasswordBase
  # Returns the full SHA1 hash of the given password in uppercase.
  #
  # @return [String] The full SHA1 hash of the given password.
  # @since 1.0.0
  def hashed_password; end

  # @example
  #   password = Pwned::Password.new("password")
  #   password.pwned? #=> true
  #   password.pwned? #=> true
  # @raise [Pwned::Error] if there are errors with the HTTP request.
  # @raise [Pwned::TimeoutError] if the HTTP request times out.
  # @return [Boolean] +true+ when the password has been pwned.
  # @since 1.0.0
  def pwned?; end

  # @example
  #   password = Pwned::Password.new("password")
  #   password.pwned_count #=> 3303003
  # @raise [Pwned::Error] if there are errors with the HTTP request.
  # @raise [Pwned::TimeoutError] if the HTTP request times out.
  # @return [Integer] the number of times the password has been pwned.
  # @since 1.0.0
  def pwned_count; end

  private

  def fetch_pwned_count; end
  def for_each_response_line(&block); end
  def hashed_password_prefix; end
  def hashed_password_suffix; end

  # Returns the value of attribute ignore_env_proxy.
  def ignore_env_proxy; end

  # Returns the value of attribute request_headers.
  def request_headers; end

  # Returns the value of attribute request_options.
  def request_options; end

  # Returns the value of attribute request_proxy.
  def request_proxy; end

  # Stream a Net::HTTPResponse by line, handling lines that cross chunks.
  #
  # @yield [last_line]
  def stream_response_lines(response, &block); end

  # Make a HTTP GET request given the url and headers.
  # Yields a `Net::HTTPResponse`.
  def with_http_response(url, &block); end
end

# The base URL for the Pwned Passwords API
Pwned::PasswordBase::API_URL = T.let(T.unsafe(nil), String)

# The default request headers that are used to make HTTP requests to the
# API. A user agent is provided as requested in the documentation.
#
# @see https://haveibeenpwned.com/API/v2#UserAgent
Pwned::PasswordBase::DEFAULT_REQUEST_HEADERS = T.let(T.unsafe(nil), Hash)

# The number of characters from the start of the hash of the password that
# are used to search for the range of passwords.
Pwned::PasswordBase::HASH_PREFIX_LENGTH = T.let(T.unsafe(nil), Integer)

# The total length of a SHA1 hash
Pwned::PasswordBase::SHA1_LENGTH = T.let(T.unsafe(nil), Integer)

# An error to represent when the Pwned Passwords API times out.
#
# @see Pwned::Password#pwned?
# @see Pwned::Password#pwned_count
class Pwned::TimeoutError < ::Pwned::Error; end

# The current version of the +pwned+ gem.
Pwned::VERSION = T.let(T.unsafe(nil), String)

# The version 1.1.0 validator that uses `pwned` in the validate method.
# This has been updated to the above `not_pwned` validator to be clearer what
# is being validated.
#
# This class is being maintained for backwards compatitibility but will be
# removed
#
# @deprecated use the +NotPwnedValidator+ instead.
# @example Validate a password on a +User+ model with the default options.
#   class User < ApplicationRecord
#   validates :password, pwned: true
#   end
# @since 1.1.0
class PwnedValidator < ::NotPwnedValidator; end
