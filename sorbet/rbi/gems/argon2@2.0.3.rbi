# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `argon2` gem.
# Please instead update this file by running `bin/tapioca gem argon2`.

# Standard Gem version constant.
module Argon2; end

class Argon2::ArgonHashFail < ::StandardError; end

# Constants utilised in several parts of the Argon2 module
# SALT_LEN is a standard recommendation from the Argon2 spec.
module Argon2::Constants; end

# Encoded output
Argon2::Constants::ENCODE_LEN = T.let(T.unsafe(nil), Integer)

# Binary, unencoded output
Argon2::Constants::OUT_LEN = T.let(T.unsafe(nil), Integer)

Argon2::Constants::SALT_LEN = T.let(T.unsafe(nil), Integer)
Argon2::ERRORS = T.let(T.unsafe(nil), Array)

# The engine class shields users from the FFI interface.
# It is generally not advised to directly use this class.
class Argon2::Engine
  class << self
    # @raise [ArgonHashFail]
    def argon2_verify(pwd, hash, secret); end

    # @raise [ArgonHashFail]
    def hash_argon2i(password, salt, t_cost, m_cost, out_len = T.unsafe(nil)); end

    # @raise [ArgonHashFail]
    def hash_argon2id(password, salt, t_cost, m_cost, out_len = T.unsafe(nil)); end

    # @raise [ArgonHashFail]
    def hash_argon2id_encode(password, salt, t_cost, m_cost, secret); end

    def saltgen; end
  end
end

# Direct external bindings. Call these methods via the Engine class to ensure points are dealt with
module Argon2::Ext
  extend ::FFI::Library

  def argon2_wrap(*_arg0); end
  def argon2i_hash_raw(*_arg0); end
  def argon2id_hash_raw(*_arg0); end
  def wrap_argon2_verify(*_arg0); end

  class << self
    def argon2_wrap(*_arg0); end
    def argon2i_hash_raw(*_arg0); end
    def argon2id_hash_raw(*_arg0); end
    def wrap_argon2_verify(*_arg0); end
  end
end

# Front-end API for the Argon2 module.
class Argon2::Password
  # @raise [ArgonHashFail]
  # @return [Password] a new instance of Password
  def initialize(options = T.unsafe(nil)); end

  # @raise [ArgonHashFail]
  def create(pass); end

  class << self
    # Helper class, just creates defaults and calls hash()
    def create(pass); end

    # Supports 1 and argon2id formats.
    #
    # @return [Boolean]
    def valid_hash?(hash); end

    # @raise [ArgonHashFail]
    def verify_password(pass, hash, secret = T.unsafe(nil)); end
  end
end

Argon2::VERSION = T.let(T.unsafe(nil), String)
