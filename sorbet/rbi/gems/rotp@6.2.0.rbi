# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rotp` gem.
# Please instead update this file by running `bin/tapioca gem rotp`.

module ROTP; end

class ROTP::Base32
  class << self
    def decode(str); end
    def encode(b); end

    # Defaults to 160 bit long secret (meaning a 32 character long base32 secret)
    def random(byte_length = T.unsafe(nil)); end

    # Prevent breaking changes
    def random_base32(str_len = T.unsafe(nil)); end

    private

    def decode_quint(q); end
  end
end

class ROTP::Base32::Base32Error < ::RuntimeError; end
ROTP::Base32::CHARS = T.let(T.unsafe(nil), Array)
ROTP::Base32::MASK = T.let(T.unsafe(nil), Integer)
ROTP::Base32::SHIFT = T.let(T.unsafe(nil), Integer)
ROTP::DEFAULT_INTERVAL = T.let(T.unsafe(nil), Integer)

class ROTP::HOTP < ::ROTP::OTP
  # Generates the OTP for the given count
  #
  # @param count [Integer] counter
  def at(count); end

  # Returns the provisioning URI for the OTP
  # This can then be encoded in a QR Code and used
  # to provision the Google Authenticator app
  #
  # @param name [String] of the account
  # @param initial_count [Integer] starting counter value, defaults to 0
  # @return [String] provisioning uri
  def provisioning_uri(name, initial_count = T.unsafe(nil)); end

  # Verifies the OTP passed in against the current time OTP
  #
  # @param otp [String/Integer] the OTP to check against
  # @param counter [Integer] the counter of the OTP
  # @param retries [Integer] number of counters to incrementally retry
  def verify(otp, counter, retries: T.unsafe(nil)); end
end

class ROTP::OTP
  # @option options
  # @option options
  # @param secret [String] in the form of base32
  # @param options [Hash] a customizable set of options
  # @return [OTP] a new instance of OTP
  def initialize(s, options = T.unsafe(nil)); end

  # Returns the value of attribute digest.
  def digest; end

  # Returns the value of attribute digits.
  def digits; end

  # Usually either the counter, or the computed integer
  # based on the Unix timestamp
  #
  # @option padded
  # @param input [Integer] the number used seed the HMAC
  # @param padded [Hash] a customizable set of options
  def generate_otp(input); end

  # Returns the value of attribute secret.
  def secret; end

  private

  def byte_secret; end

  # Turns an integer to the OATH specified
  # bytestring, which is fed to the HMAC
  # along with the secret
  def int_to_bytestring(int, padding = T.unsafe(nil)); end

  # constant-time compare the strings
  def time_constant_compare(a, b); end

  # @raise [ArgumentError]
  def verify(input, generated); end
end

ROTP::OTP::DEFAULT_DIGITS = T.let(T.unsafe(nil), Integer)

# https://github.com/google/google-authenticator/wiki/Key-Uri-Format
class ROTP::OTP::URI
  # @return [URI] a new instance of URI
  def initialize(otp, account_name:, counter: T.unsafe(nil)); end

  def to_s; end

  private

  def algorithm; end
  def counter; end
  def digits; end
  def issuer; end
  def label; end
  def parameters; end
  def period; end
  def type; end
end

class ROTP::TOTP < ::ROTP::OTP
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [TOTP] a new instance of TOTP
  def initialize(s, options = T.unsafe(nil)); end

  # Accepts either a Unix timestamp integer or a Time object.
  # Time objects will be adjusted to UTC automatically
  #
  # @param time [Time/Integer] the time to generate an OTP for, integer unix timestamp or Time object
  def at(time); end

  # Returns the value of attribute interval.
  def interval; end

  # Returns the value of attribute issuer.
  def issuer; end

  # Generate the current time OTP
  #
  # @return [Integer] the OTP as an integer
  def now; end

  # Returns the provisioning URI for the OTP
  # This can then be encoded in a QR Code and used
  # to provision the Google Authenticator app
  #
  # @param name [String] of the account
  # @return [String] provisioning URI
  def provisioning_uri(name); end

  # Verifies the OTP passed in against the current time OTP
  # and adjacent intervals up to +drift+.  Excludes OTPs
  # from `after` and earlier.  Returns time value of
  # matching OTP code for use in subsequent call.
  #
  # @param otp [String] the one time password to verify
  # @param drift_behind [Integer] how many seconds to look back
  # @param drift_ahead [Integer] how many seconds to look ahead
  # @param after [Integer] prevent token reuse, last login timestamp
  # @param at [Time] time at which to generate and verify a particular
  #   otp. default Time.now
  # @return [Integer, nil] the last successful timestamp
  #   interval
  def verify(otp, drift_ahead: T.unsafe(nil), drift_behind: T.unsafe(nil), after: T.unsafe(nil), at: T.unsafe(nil)); end

  private

  # Get back an array of timecodes for a period
  def get_timecodes(at, drift_behind, drift_ahead); end

  def timecode(time); end

  # Ensure UTC int
  def timeint(time); end
end
