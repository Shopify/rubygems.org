# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `high_voltage` gem.
# Please instead update this file by running `bin/tapioca gem high_voltage`.

module HighVoltage
  extend ::HighVoltage::Configuration
end

module HighVoltage::Configuration
  # @yield [_self]
  # @yieldparam _self [HighVoltage::Configuration] the object that the method was called on
  def configure; end

  # Returns the value of attribute content_path.
  def content_path; end

  # Sets the attribute content_path
  #
  # @param value the value to set the attribute content_path to.
  def content_path=(_arg0); end

  def full_path; end

  # Returns the value of attribute home_page.
  def home_page; end

  # Sets the attribute home_page
  #
  # @param value the value to set the attribute home_page to.
  def home_page=(_arg0); end

  # Returns the value of attribute layout.
  def layout; end

  # Sets the attribute layout
  #
  # @param value the value to set the attribute layout to.
  def layout=(_arg0); end

  def page_ids; end

  # Returns the value of attribute parent_engine.
  def parent_engine; end

  # Sets the attribute parent_engine
  #
  # @param value the value to set the attribute parent_engine to.
  def parent_engine=(_arg0); end

  # Returns the value of attribute route_drawer.
  def route_drawer; end

  # Sets the attribute route_drawer
  #
  # @param value the value to set the attribute route_drawer to.
  def route_drawer=(_arg0); end

  def routes; end
  def routes=(_arg0); end
  def set_default_configuration; end

  class << self
    # @private
    def extended(base); end
  end
end

module HighVoltage::Constraints; end

# Routing constraint to validate request.path has a corresponding view
class HighVoltage::Constraints::RootRoute
  # @return [RootRoute] a new instance of RootRoute
  def initialize; end

  # @return [Boolean]
  def matches?(request); end

  private

  def clean_page_path(request_path); end
  def content_path; end

  # Returns the value of attribute lookup_context.
  def lookup_context; end
end

class HighVoltage::Engine < ::Rails::Engine; end
class HighVoltage::InvalidPageIdError < ::StandardError; end

class HighVoltage::Page
  # @return [Page] a new instance of Page
  def initialize(content_path, file_path); end

  # Returns the value of attribute content_path.
  def content_path; end

  # Returns the value of attribute file_path.
  def file_path; end

  def id; end

  # @return [Boolean]
  def valid?; end

  private

  def available_handlers; end

  # @return [Boolean]
  def directory?; end

  # @return [Boolean]
  def exists?; end

  # @return [Boolean]
  def file_in_content_path?; end

  # @return [Boolean]
  def handled?; end

  def handler_extension; end

  # @return [Boolean]
  def partial?; end
end

class HighVoltage::PageCollector
  # @return [PageCollector] a new instance of PageCollector
  def initialize(content_path); end

  # Returns the value of attribute content_path.
  def content_path; end

  def page_ids; end

  private

  def pages; end
end

# A command for finding pages by id. This encapsulates the concepts of
# mapping page names to file names.
class HighVoltage::PageFinder
  # @return [PageFinder] a new instance of PageFinder
  def initialize(page_id); end

  def content_path; end

  # Produce a template path to the page, in a format understood by
  # `render :template => find`
  def find; end

  protected

  def clean_content_pathname; end

  # The raw page id passed in by the user
  def page_id; end
end

module HighVoltage::RouteDrawers; end

# Matches routes in the HighVoltage.content_path directory. By default this looks
# for /pages/id. e.g. http://www.example.com/pages/about_us
class HighVoltage::RouteDrawers::Default
  class << self
    def match_attributes; end
  end
end

# Matches routes from root of the domain e.g. http://www.example.com/about_us
# Uses HighVoltage::Constraints::RootRoute to validate view exists.
class HighVoltage::RouteDrawers::Root
  class << self
    def match_attributes; end
  end
end

module HighVoltage::StaticPage
  extend ::ActiveSupport::Concern

  def invalid_page; end
  def show; end

  private

  def current_page; end
  def page_finder; end
  def page_finder_factory; end
end

HighVoltage::VERSION = T.let(T.unsafe(nil), String)
