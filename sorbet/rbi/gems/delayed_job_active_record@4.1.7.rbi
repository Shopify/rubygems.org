# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `delayed_job_active_record` gem.
# Please instead update this file by running `bin/tapioca gem delayed_job_active_record`.

module Delayed; end
module Delayed::Backend; end

module Delayed::Backend::ActiveRecord
  class << self
    def configuration; end

    # @yield [configuration]
    def configure; end
  end
end

class Delayed::Backend::ActiveRecord::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # Returns the value of attribute reserve_sql_strategy.
  def reserve_sql_strategy; end

  def reserve_sql_strategy=(val); end
end

# A job object that is persisted to the database.
# Contains the work object as a YAML field.
class Delayed::Backend::ActiveRecord::Job < ::ActiveRecord::Base
  include ::Delayed::Backend::ActiveRecord::Job::GeneratedAttributeMethods
  include ::Delayed::Backend::ActiveRecord::Job::GeneratedAssociationMethods
  include ::Delayed::Backend::Base
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  extend ::Delayed::Backend::Base::ClassMethods
  extend ::Kaminari::ConfigurationMethods::ClassMethods

  def reload(*args); end

  class << self
    def __callbacks; end
    def _validators; end
    def after_fork; end
    def before_fork; end
    def by_priority(*args, **_arg1); end

    # When a worker is exiting, make sure we don't have any locked jobs.
    def clear_locks!(worker_name); end

    # Get the current time (GMT or local depending on DB)
    # Note: This does not ping the DB to get the time, so all your clients
    # must have syncronized clocks.
    def db_time_now; end

    def defined_enums; end
    def for_queues(*args, **_arg1); end
    def max_priority(*args, **_arg1); end
    def min_priority(*args, **_arg1); end
    def page(num = T.unsafe(nil)); end
    def ready_to_run(worker_name, max_run_time); end
    def reserve(worker, max_run_time = T.unsafe(nil)); end
    def reserve_with_scope(ready_scope, worker, now); end
    def reserve_with_scope_using_default_sql(ready_scope, worker, now); end
    def reserve_with_scope_using_optimized_mssql(ready_scope, worker, now); end
    def reserve_with_scope_using_optimized_mysql(ready_scope, worker, now); end
    def reserve_with_scope_using_optimized_postgres(ready_scope, worker, now); end
    def reserve_with_scope_using_optimized_sql(ready_scope, worker, now); end
    def set_delayed_job_table_name; end
  end
end

module Delayed::Backend::ActiveRecord::Job::GeneratedAssociationMethods; end
module Delayed::Backend::ActiveRecord::Job::GeneratedAttributeMethods; end
Delayed::Job = Delayed::Backend::ActiveRecord::Job
