# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `execjs` gem.
# Please instead update this file by running `bin/tapioca gem execjs`.

module ExecJS
  class << self
    def compile(source, options = T.unsafe(nil)); end

    # @return [Boolean]
    def cygwin?; end

    def eval(source, options = T.unsafe(nil)); end
    def exec(source, options = T.unsafe(nil)); end
    def root; end

    # Returns the value of attribute runtime.
    def runtime; end

    # @raise [RuntimeUnavailable]
    def runtime=(runtime); end

    def runtimes; end

    # @return [Boolean]
    def windows?; end
  end
end

class ExecJS::DisabledRuntime < ::ExecJS::Runtime
  # @return [Boolean]
  def available?; end

  # @raise [Error]
  def compile(source, options = T.unsafe(nil)); end

  # @return [Boolean]
  def deprecated?; end

  # @raise [Error]
  def eval(source, options = T.unsafe(nil)); end

  # @raise [Error]
  def exec(source, options = T.unsafe(nil)); end

  def name; end
end

class ExecJS::DuktapeRuntime < ::ExecJS::Runtime
  # @return [Boolean]
  def available?; end

  def name; end
end

class ExecJS::DuktapeRuntime::Context < ::ExecJS::Runtime::Context
  # @return [Context] a new instance of Context
  def initialize(runtime, source = T.unsafe(nil), options = T.unsafe(nil)); end

  def call(identifier, *args); end
  def eval(source, options = T.unsafe(nil)); end
  def exec(source, options = T.unsafe(nil)); end

  private

  def wrap_error(e); end
end

# Encodes strings as UTF-8
module ExecJS::Encoding
  # workaround for jruby bug http://jira.codehaus.org/browse/JRUBY-6588
  # workaround for rbx bug https://github.com/rubinius/rubinius/issues/1729
  def encode(string); end
end

class ExecJS::Error < ::StandardError; end

class ExecJS::ExternalRuntime < ::ExecJS::Runtime
  # @return [ExternalRuntime] a new instance of ExternalRuntime
  def initialize(options); end

  # @return [Boolean]
  def available?; end

  # @return [Boolean]
  def deprecated?; end

  def exec_runtime(filename); end

  # Returns the value of attribute name.
  def name; end

  protected

  def encode_source(source); end
  def encode_unicode_codepoints(str); end
  def exec_runtime_error(output); end
  def generate_compile_method(path); end
  def json2_source; end
  def which(command); end

  private

  def binary; end
  def locate_executable(command); end
end

class ExecJS::ExternalRuntime::Context < ::ExecJS::Runtime::Context
  # @return [Context] a new instance of Context
  def initialize(runtime, source = T.unsafe(nil), options = T.unsafe(nil)); end

  def call(identifier, *args); end
  def eval(source, options = T.unsafe(nil)); end
  def exec(source, options = T.unsafe(nil)); end

  protected

  # See Tempfile.create on Ruby 2.1
  def create_tempfile(basename); end

  def extract_result(output, filename); end
  def write_to_tempfile(contents); end
end

class ExecJS::MiniRacerRuntime < ::ExecJS::Runtime
  # @return [Boolean]
  def available?; end

  def name; end
end

class ExecJS::MiniRacerRuntime::Context < ::ExecJS::Runtime::Context
  # @return [Context] a new instance of Context
  def initialize(runtime, source = T.unsafe(nil), options = T.unsafe(nil)); end

  def call(identifier, *args); end
  def eval(source, options = T.unsafe(nil)); end
  def exec(source, options = T.unsafe(nil)); end

  private

  def strip_functions!(value); end
  def translate; end
end

class ExecJS::ProgramError < ::ExecJS::Error; end

class ExecJS::RubyRhinoRuntime < ::ExecJS::Runtime
  # @return [Boolean]
  def available?; end

  def name; end
end

class ExecJS::RubyRhinoRuntime::Context < ::ExecJS::Runtime::Context
  # @return [Context] a new instance of Context
  def initialize(runtime, source = T.unsafe(nil), options = T.unsafe(nil)); end

  def call(properties, *args); end
  def eval(source, options = T.unsafe(nil)); end
  def exec(source, options = T.unsafe(nil)); end
  def unbox(value); end
  def wrap_error(e); end

  private

  # Disables bytecode compiling which limits you to 64K scripts
  def fix_memory_limit!(context); end
end

# Abstract base class for runtimes
class ExecJS::Runtime
  # @raise [NotImplementedError]
  # @return [Boolean]
  def available?; end

  def compile(source, options = T.unsafe(nil)); end
  def context_class; end

  # @return [Boolean]
  def deprecated?; end

  def eval(source, options = T.unsafe(nil)); end
  def exec(source, options = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  def name; end
end

class ExecJS::Runtime::Context
  include ::ExecJS::Encoding

  # @return [Context] a new instance of Context
  def initialize(runtime, source = T.unsafe(nil), options = T.unsafe(nil)); end

  # Evaluates +source+ as an expression (which should be of type
  # +function+), and calls the function with the given arguments.
  # The function will be evaluated with the global object as +this+.
  #
  #   context.call("function(a, b) { return a + b }", 1, 1) # => 2
  #   context.call("CoffeeScript.compile", "1 + 1")
  #
  # @raise [NotImplementedError]
  def call(source, *args); end

  # Evaluates the +source+ as an expression and returns the result.
  #
  #   context.eval("1")        # => 1
  #   context.eval("return 1") # => Raises SyntaxError
  #
  # @raise [NotImplementedError]
  def eval(source, options = T.unsafe(nil)); end

  # Evaluates the +source+ in the context of a function body and returns the
  # returned value.
  #
  #   context.exec("return 1") # => 1
  #   context.exec("1")        # => nil (nothing was returned)
  #
  # @raise [NotImplementedError]
  def exec(source, options = T.unsafe(nil)); end
end

class ExecJS::RuntimeError < ::ExecJS::Error; end
class ExecJS::RuntimeUnavailable < ::ExecJS::RuntimeError; end

module ExecJS::Runtimes
  class << self
    def autodetect; end
    def best_available; end
    def from_environment; end
    def names; end
    def runtimes; end
  end
end

ExecJS::Runtimes::Disabled = T.let(T.unsafe(nil), ExecJS::DisabledRuntime)
ExecJS::Runtimes::Duktape = T.let(T.unsafe(nil), ExecJS::DuktapeRuntime)
ExecJS::Runtimes::JScript = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)
ExecJS::Runtimes::JavaScriptCore = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)
ExecJS::Runtimes::MiniRacer = T.let(T.unsafe(nil), ExecJS::MiniRacerRuntime)
ExecJS::Runtimes::Node = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)
ExecJS::Runtimes::RubyRhino = T.let(T.unsafe(nil), ExecJS::RubyRhinoRuntime)
ExecJS::Runtimes::SpiderMonkey = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)
ExecJS::Runtimes::Spidermonkey = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)
ExecJS::Runtimes::V8 = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)
ExecJS::VERSION = T.let(T.unsafe(nil), String)
