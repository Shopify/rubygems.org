# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `roadie-rails` gem.
# Please instead update this file by running `bin/tapioca gem roadie-rails`.

module Roadie; end
module Roadie::Rails; end

class Roadie::Rails::AssetPipelineProvider
  include ::Roadie::AssetProvider

  # @return [AssetPipelineProvider] a new instance of AssetPipelineProvider
  def initialize(pipeline); end

  def find_stylesheet(name); end

  # Returns the value of attribute pipeline.
  def pipeline; end

  private

  def asset_prefix; end
  def filename(asset); end
  def find_asset_in_pipeline(name); end
  def normalize_asset_name(href); end
  def remove_asset_digest(path); end
  def remove_asset_prefix(path); end
end

Roadie::Rails::AssetPipelineProvider::DIGEST_PATTERN = T.let(T.unsafe(nil), Regexp)

module Roadie::Rails::Automatic
  def mail(*args, &block); end
  def roadie_options; end
end

class Roadie::Rails::DocumentBuilder
  class << self
    def build(html, options); end
  end
end

# Extend instances of Mail with this to have it inlined automatically when
# delivered. You'll need to assign some #roadie_options for it to actually
# do anything.
module Roadie::Rails::InlineOnDelivery
  def deliver; end
  def deliver!; end

  # Returns the value of attribute roadie_options.
  def roadie_options; end

  # Sets the attribute roadie_options
  #
  # @param value the value to set the attribute roadie_options to.
  def roadie_options=(_arg0); end

  private

  def inline_styles; end
end

class Roadie::Rails::MailInliner
  # @return [MailInliner] a new instance of MailInliner
  def initialize(email, options); end

  # Returns the value of attribute email.
  def email; end

  def execute; end

  # Returns the value of attribute options.
  def options; end

  private

  def improve_body; end
  def improve_html_part(html_part); end
  def transform_html(old_html); end
end

module Roadie::Rails::Mailer
  # Generate an email and run Roadie on it. Will use #roadie_options to get
  # default options if not passed in.
  def roadie_mail(options = T.unsafe(nil), final_roadie_options = T.unsafe(nil), &block); end

  def roadie_options; end
end

class Roadie::Rails::Options
  # @return [Options] a new instance of Options
  def initialize(options = T.unsafe(nil)); end

  def [](option); end
  def []=(option, value); end
  def after_transformation; end

  # Sets the attribute after_transformation
  #
  # @param value the value to set the attribute after_transformation to.
  def after_transformation=(_arg0); end

  def apply_to(document); end
  def asset_providers; end
  def asset_providers=(providers); end
  def before_transformation; end

  # Sets the attribute before_transformation
  #
  # @param value the value to set the attribute before_transformation to.
  def before_transformation=(_arg0); end

  def combine(options); end
  def combine!(options); end
  def external_asset_providers; end
  def external_asset_providers=(providers); end
  def keep_uninlinable_css; end

  # Sets the attribute keep_uninlinable_css
  #
  # @param value the value to set the attribute keep_uninlinable_css to.
  def keep_uninlinable_css=(_arg0); end

  def merge(options); end
  def merge!(options); end
  def url_options; end

  # Sets the attribute url_options
  #
  # @param value the value to set the attribute url_options to.
  def url_options=(_arg0); end

  private

  def complain_about_unknown_keys(keys); end
end

Roadie::Rails::Options::ATTRIBUTE_NAMES = T.let(T.unsafe(nil), Array)
class Roadie::Rails::Railtie < ::Rails::Railtie; end

module Roadie::Rails::Utils
  private

  # Return a callable that will call both inputs. If either is nil, then
  # just return the other.
  #
  # The result from the second one will be the result of the combined
  # callable.
  #
  # ```ruby
  # combine_callable(-> { 1 }, -> { 2 }).call # => 2
  # combine_callable(-> { 1 }, nil).call # => 1
  # combine_callable(nil, nil).nil? # => true
  # ```
  def combine_callable(first, second); end

  # Combine two hashes, or return the non-nil hash if either is nil.
  # Returns nil if both are nil.
  def combine_hash(first, second); end

  # Discard the nil value. If neither is nil, then yield both and return
  # the result from the block.
  #
  # ```ruby
  # combine_nilable(nil, 5) { |a, b| a+b } # => 5
  # combine_nilable(7, nil) { |a, b| a+b } # => 7
  # combine_nilable(nil, nil) { |a, b| a+b } # => nil
  # combine_nilable(7, 5) { |a, b| a+b } # => 12
  # ```
  def combine_nilable(first, second); end

  # Combine two Provider ducks into a ProviderList. If either is nil, pick
  # the non-nil value instead.
  def combine_providers(first, second); end

  class << self
    # Return a callable that will call both inputs. If either is nil, then
    # just return the other.
    #
    # The result from the second one will be the result of the combined
    # callable.
    #
    # ```ruby
    # combine_callable(-> { 1 }, -> { 2 }).call # => 2
    # combine_callable(-> { 1 }, nil).call # => 1
    # combine_callable(nil, nil).nil? # => true
    # ```
    def combine_callable(first, second); end

    # Combine two hashes, or return the non-nil hash if either is nil.
    # Returns nil if both are nil.
    def combine_hash(first, second); end

    # Discard the nil value. If neither is nil, then yield both and return
    # the result from the block.
    #
    # ```ruby
    # combine_nilable(nil, 5) { |a, b| a+b } # => 5
    # combine_nilable(7, nil) { |a, b| a+b } # => 7
    # combine_nilable(nil, nil) { |a, b| a+b } # => nil
    # combine_nilable(7, 5) { |a, b| a+b } # => 12
    # ```
    def combine_nilable(first, second); end

    # Combine two Provider ducks into a ProviderList. If either is nil, pick
    # the non-nil value instead.
    def combine_providers(first, second); end
  end
end

Roadie::Rails::VERSION = T.let(T.unsafe(nil), String)
Roadie::VERSION = T.let(T.unsafe(nil), String)
