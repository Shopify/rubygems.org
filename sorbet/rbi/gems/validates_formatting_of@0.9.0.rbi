# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `validates_formatting_of` gem.
# Please instead update this file by running `bin/tapioca gem validates_formatting_of`.

# Extend ActiveRecord's methods
module ValidatesFormattingOf; end

class ValidatesFormattingOf::InvalidRegularExpression < ::StandardError
  # @return [InvalidRegularExpression] a new instance of InvalidRegularExpression
  def initialize(name); end
end

module ValidatesFormattingOf::Method
  extend ::ValidatesFormattingOf::ValidationAddition
end

class ValidatesFormattingOf::MissingValidation < ::StandardError
  # @return [MissingValidation] a new instance of MissingValidation
  def initialize(method); end
end

module ValidatesFormattingOf::ModelAdditions
  # Using validates_formatting_of is as simple as using Rails' built-in
  # validation methods in models.
  #
  # class User < ActiveRecord::Base
  #   validates_formatting_of :email, :using => :email
  # end
  #
  # If your column name is idencital to any of the built-in methods, you
  # may leave off the `:using` option and validates_formatting_of will
  # automatically use the validation with the matching name.
  #
  # class User < ActiveRecord::Base
  #   validates_formatting_of :email
  # end
  #
  # You can also pass conditions and options for Rails to use
  # * :if
  # * :unless
  # * :allow_nil
  # * :allow_blank
  # * :on
  def validates_formatting_of(attribute, options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Railtie < ::Rails::Railtie; end
ValidatesFormattingOf::VERSION = T.let(T.unsafe(nil), String)

class ValidatesFormattingOf::Validation
  # @return [Validation] a new instance of Validation
  def initialize(name, regexp, message = T.unsafe(nil)); end

  def inspect; end

  # Returns the value of attribute message.
  def message; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute regex.
  def regex; end

  def to_s; end
end

module ValidatesFormattingOf::ValidationAddition
  def add(name, regex, message = T.unsafe(nil)); end

  # @return [Boolean]
  def exists?(name); end

  # @raise [MissingValidation]
  def find(attribute, opts = T.unsafe(nil)); end

  # @return [Boolean]
  def missing?(name); end

  # Returns the value of attribute validations.
  def validations; end
end

module ValidatesFormattingOf::Validations; end

class ValidatesFormattingOf::Validations::AlphaValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::AlphanumValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::CreditCardValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::DollarsValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::EmailValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::HexColorValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::IpAddressV4Validator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::SimpleEmailValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::SsnValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::UrlValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::UsPhoneValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::UsZipValidator < ::ValidatesFormattingOf::Validations::Validator
  def initialize(options = T.unsafe(nil)); end
end

class ValidatesFormattingOf::Validations::Validator < ::ActiveModel::Validations::FormatValidator
  # @return [Validator] a new instance of Validator
  def initialize(options = T.unsafe(nil), format = T.unsafe(nil)); end
end
