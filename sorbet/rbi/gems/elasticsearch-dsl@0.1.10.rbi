# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elasticsearch-dsl` gem.
# Please instead update this file by running `bin/tapioca gem elasticsearch-dsl`.

module Elasticsearch; end

# The main module, which can be included into your own class or namespace,
# to provide the DSL methods.
#
# @example
#
#   include Elasticsearch::DSL
#
#   definition = search do
#   query do
#   match title: 'test'
#   end
#   end
#
#   definition.to_hash
#   # => { query: { match: { title: "test"} } }
# @see Search
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/query-dsl-intro.html
module Elasticsearch::DSL
  include ::Elasticsearch::DSL::Search

  class << self
    # @private
    def included(base); end
  end
end

# Provides DSL methods for building the search definition
# (queries, filters, aggregations, sorting, etc)
module Elasticsearch::DSL::Search
  extend ::Elasticsearch::DSL::Search

  # Initialize a new Search object
  #
  # @example Building a search definition declaratively
  #
  #   definition = search do
  #   query do
  #   match title: 'test'
  #   end
  #   end
  #   definition.to_hash
  #   => {:query=>{:match=>{:title=>"test"}}}
  # @example Using the class imperatively
  #
  #   definition = Search.new
  #   query = Queries::Match.new title: 'test'
  #   definition.query query
  #   definition.to_hash
  #   # => {:query=>{:match=>{:title=>"test"}}}
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html
  def search(*args, &block); end
end

# Wraps the `aggregations` part of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html
class Elasticsearch::DSL::Search::Aggregation
  # @return [Aggregation] a new instance of Aggregation
  def initialize(*args, &block); end

  # Defines an aggregation nested in another one
  def aggregation(*args, &block); end

  # Returns the aggregations
  def aggregations; end

  # Evaluates the block passed to initializer, ensuring it is called just once
  #
  # @api private
  # @return [self]
  def call; end

  # Looks up the corresponding class for a method being invoked, and initializes it
  #
  # @raise [NoMethodError] When the corresponding class cannot be found
  def method_missing(name, *args, &block); end

  # Converts the object to a Hash
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end
end

# Contains the classes for Elasticsearch aggregations
module Elasticsearch::DSL::Search::Aggregations; end

# A single-value metric aggregation which returns the average of numeric values
#
# @example
#
#   search do
#   aggregation :avg_clicks do
#   avg field: 'clicks'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-avg-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Avg
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A sibling pipeline aggregation which calculates the (mean) average value of a specified metric in a sibling aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :avg_monthly_sales do
#   avg_bucket buckets_path: 'sales_per_month>sales'
#   end
# @example Passing the options as a block
#
#   aggregation :avg_monthly_sales do
#   avg_bucket do
#   buckets_path 'sales_per_month>sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-avg-bucket-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::AvgBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A parent pipeline aggregation which executes a script which can perform per bucket computations on specified metrics in the parent multi-bucket aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :t-shirt-percentage do
#   bucket_script buckets_path: { tShirtSales: 't-shirts>sales', totalSales: 'total_sales' }, script: 'tShirtSales / totalSales * 100'
#   end
# @example Passing the options as a block
#
#   aggregation :t-shirt-percentage do
#   bucket_script do
#   buckets_path tShirtSales: 't-shirts>sales', totalSales: 'total_sales'
#   script 'tShirtSales / totalSales * 100'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-script-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::BucketScript
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A parent pipeline aggregation which executes a script which determines whether the current bucket will be retained in the parent multi-bucket aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :sales_bucket_filter do
#   bucket_selector buckets_path: { totalSales: 'total_sales' }, script: 'totalSales <= 50'
#   end
# @example Passing the options as a block
#
#   aggregation :sales_bucket_filter do
#   bucket_selector do
#   buckets_path totalSales: 'total_sales'
#   script 'totalSales <= 50'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-selector-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::BucketSelector
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def gap_policy(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A parent pipeline aggregation which sorts the buckets of its parent multi-bucket aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :sales_bucket_filter do
#   bucket_sort gap_policy: 'insert_zero'
#   end
# @example Passing the options as a block
#
#   aggregation :sales_bucket_sort do
#   bucket_sort do
#   sort do
#   by :total_sales, order: 'desc'
#   end
#   size 3
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-sort-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::BucketSort
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def from(*args); end
  def gap_policy(*args); end
  def size(*args); end

  # Add a sort clause to the search definition.
  #
  # @example
  #
  #   bucket_sort do
  #   sort do
  #   by :total_sales, order: 'desc'
  #   end
  #   end
  # @return [Sort, Hash] The sort definition.
  # @since 0.1.9
  def sort(*args, &block); end

  # Get a hash representation of the aggregation.
  #
  # client.search(body: s.to_hash)
  #
  # @example
  #
  #   s = search do
  #   aggregation do
  #   bucket_sort do
  #   sort do
  #   by :total_sales, order: 'desc'
  #   end
  #   end
  #   end
  #   end
  # @return [Hash] The hash representation of the aggregation.
  # @since 0.1.9
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-value metric aggregation which returns the approximate count of distinct values
#
# @example
#
#   search do
#   aggregation :authors do
#   cardinality do
#   field 'author'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Cardinality
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def params(*args); end
  def precision_threshold(*args); end
  def rehash(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-bucket aggregation which allows to aggregate from buckets on parent documents
# to buckets on the children documents
#
# See the integration test for a full example.
#
# @example Return the top commenters per article category
#
#   search do
#   aggregation :top_categories do
#   terms field: 'category' do
#   aggregation :comments do
#   children type: 'comment' do
#   aggregation :top_authors do
#   terms field: 'author'
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-children-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Children
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation that creates composite buckets from different sources.
#
# @example
#
#   search do
#   aggregation :things do
#   composite do
#   size 2000
#   sources [
#   { thing1: { terms: { field: 'thing1.field1' } } },
#   { thing2: { terms: { field: 'thing2.field2' } } }
#   ]
#   after after_key
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Composite
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def after(*args); end
  def size(*args); end
  def sources(*args); end
  def to_hash(_options = T.unsafe(nil)); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A parent pipeline aggregation which calculates the cumulative sum of a specified metric in a parent histogram (or date_histogram) aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :cumulative_sales do
#   cumulative_sum buckets_path: 'sales'
#   end
# @example Passing the options as a block
#
#   aggregation :cumulative_sales do
#   cumulative_sum do
#   buckets_path 'sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-cumulative-sum-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::CumulativeSum
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which returns a histogram for date fields
#
# @example
#
#   search do
#   aggregation :daily do
#   field             'published_at'
#   calendar_interval 'day'
#   format            'yyyy-MM-dd'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-datehistogram-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::DateHistogram
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def calendar_interval(*args); end
  def extended_bounds(*args); end
  def field(*args); end
  def fixed_interval(*args); end
  def format(*args); end
  def min_doc_count(*args); end
  def order(*args); end
  def post_offset(*args); end
  def post_zone(*args); end
  def pre_offset(*args); end
  def pre_zone(*args); end
  def pre_zone_adjust_large_interval(*args); end
  def time_zone(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which returns document counts for custom date ranges
#
# @example
#
#   search do
#   aggregation :compare_to_last_year do
#   date_range do
#   field    'published_at'
#   ranges [
#   { from: 'now-1M/M', to: 'now/M' },
#   { from: 'now-13M/M', to: 'now-12M/M' }
#   ]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-daterange-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::DateRange
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def format(*args); end
  def ranges(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A parent pipeline aggregation which calculates the derivative of a specified metric in a parent histogram (or date_histogram) aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :sales_deriv do
#   derivative buckets_path: 'sales'
#   end
# @example Passing the options as a block
#
#   aggregation :sales_deriv do
#   derivative do
#   buckets_path 'sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-derivative-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Derivative
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-value metrics aggregation which returns the extended statistical information on numeric values
#
# @example
#
#   search do
#   aggregation :clicks_stats do
#   extended_stats field: 'clicks'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-extendedstats-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::ExtendedStats
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A sibling pipeline aggregation which calculates a variety of stats across all bucket of a specified metric in a sibling aggregation. The specified metric must be numeric and the sibling aggregation must be a multi-bucket aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :stats_monthly_sales do
#   extended_stats_bucket buckets_path: 'sales_per_month>sales'
#   end
# @example Passing the options as a block
#
#   aggregation :stats_monthly_sales do
#   extended_stats_bucket do
#   buckets_path 'sales_per_month>sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-extended-stats-bucket-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::ExtendedStatsBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Defines a single bucket with documents matching the provided filter,
# usually to define scope for a nested aggregation
#
# @example
#
#   search do
#   aggregation :clicks_for_tag_one do
#   filter terms: { tags: ['one'] } do
#   aggregation :sum_clicks do
#   sum field: 'clicks'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filters-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Filter
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which defines multiple buckets matching the provided filters,
# usually to define scope for a nested aggregation
#
# @example
#
#   search do
#   aggregation :avg_clicks_per_tag_one_and_two do
#   filters do
#   filters one: { terms: { tags: ['one'] } },
#   two: { terms: { tags: ['two'] } }
#
#   aggregation :avg do
#   avg field: 'clicks'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filters-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Filters
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def filters(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# An aggregation which will calculate the smallest bounding box required to encapsulate
# all of the documents matching the query
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   geo_bounding_box :location do
#   top_left     "40.8,-74.1"
#   bottom_right "40.4,-73.9"
#   end
#   end
#   end
#   end
#
#   aggregation :new_york do
#   geohash_grid field: 'location'
#   end
#
#   aggregation :map_zoom do
#   geo_bounds field: 'location'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/geo-bounds-agg.html
class Elasticsearch::DSL::Search::Aggregations::GeoBounds
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def wrap_longitude(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which will return document counts for distance perimeters,
# defined as ranges
#
# See the integration test for a full example.
#
# @example
#
#   search do
#   aggregation :venue_distances do
#   geo_distance do
#   field  :location
#   origin '38.9126352,1.4350621'
#   unit   'km'
#   ranges [ { to: 1 }, { from: 1, to: 5 }, { from: 5, to: 10 }, { from: 10 } ]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/geo-distance-agg.html
class Elasticsearch::DSL::Search::Aggregations::GeoDistance
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def distance_type(*args); end
  def field(*args); end
  def origin(*args); end
  def ranges(*args); end
  def unit(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which will return document counts for geohash grid cells
#
# See the integration test for a full example.
#
# @example
#
#   search do
#   aggregation :venue_distributions do
#   geohash_grid do
#   field     :location
#   precision 5
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/geohash-grid-agg.html
class Elasticsearch::DSL::Search::Aggregations::GeohashGrid
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def precision(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Defines a single bucket of all the documents matching a query
#
# @example
#
#   search do
#   aggregation :all_documents do
#   global do
#   aggregation :avg_clicks do
#   avg field: 'clicks'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-global-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Global
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which returns document counts for a defined numerical interval
#
# @example
#
#   search do
#   aggregation :age do
#   histogram do
#   field   'age'
#   interval 5
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-histogram-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Histogram
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def extended_bounds(*args); end
  def field(*args); end
  def interval(*args); end
  def keyed(*args); end
  def min_doc_count(*args); end
  def order(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which returns document counts for defined IP ranges
#
# @example
#
#   search do
#   aggregation :ips do
#   ip_range do
#   field 'ip'
#   ranges [ { mask: '10.0.0.0/25' }, { mask: '10.0.0.127/25' } ]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-iprange-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::IpRange
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def ranges(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-value metric aggregation which returns the maximum value from numeric values
#
# @example
#
#   search do
#   aggregation :max_clicks do
#   max field: 'clicks'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-max-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Max
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A sibling pipeline aggregation which identifies the bucket(s) with the maximum value of a specified metric in a sibling aggregation and outputs both the value and the key(s) of the bucket(s).
#
# @example Passing the options as a Hash
#
#   aggregation :max_monthly_sales do
#   max_bucket buckets_path: 'sales_per_month>sales'
#   end
# @example Passing the options as a block
#
#   aggregation :max_monthly_sales do
#   max_bucket do
#   buckets_path 'sales_per_month>sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-max-bucket-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::MaxBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-value metric aggregation which returns the minimum value from numeric values
#
# @example
#
#   search do
#   aggregation :min_clicks do
#   min field: 'clicks'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-min-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Min
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A sibling pipeline aggregation which identifies the bucket(s) with the minimum value of a specified metric in a sibling aggregation and outputs both the value and the key(s) of the bucket(s).
#
# @example Passing the options as a Hash
#
#   aggregation :min_monthly_sales do
#   min_bucket buckets_path: 'sales_per_month>sales'
#   end
# @example Passing the options as a block
#
#   aggregation :min_monthly_sales do
#   min_bucket do
#   buckets_path 'sales_per_month>sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-min-bucket-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::MinBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single bucket aggregation that creates a bucket of all documents
# which are missing a value for the field
#
# @example Passing the options as a Hash
#
#   aggregation :articles_without_tags do
#   missing field: 'tags'
#   end
# @example Passing the options as a block
#
#   search do
#   aggregation :articles_without_tags do
#   missing do
#   field 'tags'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/master/search-aggregations-bucket-missing-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Missing
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Given an ordered series of data, the Moving Average aggregation will slide a window across the data and emit the average value of that window.
#
# @example Passing the options as a Hash
#
#   aggregation :the_movavg do
#   moving_avg buckets_path: 'the_sum'
#   end
# @example Passing the options as a block
#
#   aggregation :the_movavg do
#   moving_avg do
#   buckets_path 'the_sum'
#   model 'holt'
#   window 5
#   gap_policy 'insert_zero'
#   settings({ alpha: 0.5 })
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-movavg-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::MovingAvg
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def minimize(*args); end
  def model(*args); end
  def settings(*args); end
  def window(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-bucket aggregation which allows to aggregate on nested fields
#
# See the integration test for a full example.
#
# @example
#
#   search do
#   aggregation :offers do
#   nested do
#   path 'offers'
#   aggregation :min_price do
#   min field: 'offers.price'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-nested-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Nested
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def path(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-value metrics aggregation which calculates percentile ranks on numeric values
#
# @example
#
#   search do
#   aggregation :load_time_outliers do
#   percentile_ranks do
#   field 'load_time'
#   values [ 15, 30 ]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-percentile-rank-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::PercentileRanks
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def compression(*args); end
  def field(*args); end
  def params(*args); end
  def script(*args); end
  def values(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-value metrics aggregation which calculates percentiles on numeric values
#
# @example
#
#   search do
#   aggregation :load_time_outliers do
#   percentiles do
#   field 'load_time'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-percentile-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Percentiles
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def compression(*args); end
  def field(*args); end
  def params(*args); end
  def percents(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A sibling pipeline aggregation which calculates percentiles across all bucket of a specified metric in a sibling aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :sum_monthly_sales do
#   percentiles_bucket buckets_path: 'sales_per_month>sales'
#   end
# @example Passing the options as a block
#
#   aggregation :sum_monthly_sales do
#   percentiles_bucket do
#   buckets_path 'sales_per_month>sales'
#   percents [25.0 50.0 75.0]
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-percentiles-bucket-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::PercentilesBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def percents(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which returns document counts for custom numerical ranges,
# which define the buckets
#
# @example
#
#   search do
#   aggregation :clicks do
#   range field: 'clicks',
#   ranges: [
#   { to: 10 },
#   { from: 10, to: 20 }
#   ]
#   end
#   end
# @example Using custom names for the ranges
#
#   search do
#   aggregation :clicks do
#   range do
#   field 'clicks'
#   key :low, to: 10
#   key :mid, from: 10, to: 20
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-range-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Range
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def key(key, value); end
  def keyed(*args); end
  def params(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-bucket aggregation which allows to aggregate on "parent" documents
# from the nested documents
#
# See the integration test for a full example.
#
# @example
#
#   search do
#   aggregation :offers do
#   nested do
#   path 'offers'
#   aggregation :top_categories do
#   reverse_nested do
#   aggregation :top_category_per_offer do
#   terms field: 'category'
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::ReverseNested
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A metric aggregation which uses scripts for the computation
#
# See the integration test for a full example.
#
# @example
#
#   search do
#   aggregation :clicks_for_one do
#   scripted_metric do
#   init_script "_agg['transactions'] = []"
#   map_script  "if (doc['tags'].value.contains('one')) { _agg.transactions.add(doc['clicks'].value) }"
#   combine_script "sum = 0; for (t in _agg.transactions) { sum += t }; return sum"
#   reduce_script "sum = 0; for (a in _aggs) { sum += a }; return sum"
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-scripted-metric-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::ScriptedMetric
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def combine_script(*args); end
  def init_script(*args); end
  def lang(*args); end
  def map_script(*args); end
  def params(*args); end
  def reduce_script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Serial differencing is a technique where values in a time series are subtracted from itself at different time lags or periods.
#
# @example Passing the options as a Hash
#
#   aggregation :thirtieth_difference do
#   serial_diff buckets_path: 'the_sum'
#   end
# @example Passing the options as a block
#
#   aggregation :thirtieth_difference do
#   serial_diff do
#   buckets_path 'the_sum'
#   lag 30
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-serialdiff-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::SerialDiff
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def lag(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation that returns interesting or unusual occurrences of terms in a set
#
# @example
#
#   search do
#   query do
#   match :title do
#   query 'fink'
#   end
#   end
#
#   aggregation :interesting_terms do
#   significant_terms do
#   field :body
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::SignificantTerms
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def background_filter(*args); end
  def chi_square(*args); end
  def exclude(*args); end
  def field(*args); end
  def gnd(*args); end
  def include(*args); end
  def min_doc_count(*args); end
  def mutual_information(*args); end
  def shard_min_doc_count(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# An aggregation that returns interesting or unusual occurrences of free-text terms in a set.
#
# @example
#
#   search do
#   query do
#   match :title do
#   query 'fink'
#   end
#   end
#
#   aggregation :interesting_terms do
#   significant_text do
#   field :body
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-aggregations-bucket-significanttext-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::SignificantText
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def background_filter(*args); end
  def chi_square(*args); end
  def exclude(*args); end
  def field(*args); end
  def gnd(*args); end
  def include(*args); end
  def min_doc_count(*args); end
  def mutual_information(*args); end
  def shard_min_doc_count(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-value metrics aggregation which returns statistical information on numeric values
#
# @example Passing the options as a Hash
#
#   search do
#   aggregation :clicks_stats do
#   stats field: 'clicks'
#   end
#   end
# @example Passing the options as a block
#
#   search do
#   aggregation :clicks_stats do
#   stats do
#   field 'clicks'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Stats
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A sibling pipeline aggregation which calculates a variety of stats across all bucket of a specified metric in a sibling aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :stats_monthly_sales do
#   stats_bucket buckets_path: 'sales_per_month>sales'
#   end
# @example Passing the options as a block
#
#   aggregation :stats_monthly_sales do
#   stats_bucket do
#   buckets_path 'sales_per_month>sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-stats-bucket-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::StatsBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-value metric aggregation which returns the sum of numeric values
#
# @example
#
#   search do
#   aggregation :sum_clicks do
#   sum field: 'clicks'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Sum
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A sibling pipeline aggregation which calculates the sum across all bucket of a specified metric in a sibling aggregation.
#
# @example Passing the options as a Hash
#
#   aggregation :sum_monthly_sales do
#   sum_bucket buckets_path: 'sales_per_month>sales'
#   end
# @example Passing the options as a block
#
#   aggregation :sum_monthly_sales do
#   sum_bucket do
#   buckets_path 'sales_per_month>sales'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-sum-bucket-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::SumBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A multi-bucket aggregation which returns the collection of terms and their document counts
#
# @example Passing the options as a Hash
#
#   aggregation :tags do
#   terms field: 'tags'
#   end
# @example Passing the options as a block
#
#   search do
#   aggregation :tags do
#   terms do
#   field 'tags'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::Terms
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def exclude(*args); end
  def field(*args); end
  def include(*args); end
  def min_doc_count(*args); end
  def order(*args); end
  def script(*args); end
  def shard_min_doc_count(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A metric aggregator which returns the most relevant documents per bucket
#
# @example
#
#   search do
#   aggregation :tags do
#   terms do
#   field 'tags'
#
#   aggregation :top_hits do
#   top_hits sort: [ clicks: { order: 'desc' } ], _source: { include: 'title' }
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::TopHits
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def from(*args); end
  def size(*args); end
  def sort(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A single-value metric aggregation which returns the number of values for the aggregation scope
#
# @example
#
#   search do
#   aggregation :value_count do
#   value_count field: 'clicks'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-valuecount-aggregation.html
class Elasticsearch::DSL::Search::Aggregations::ValueCount
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::AggregationsCollection < ::Hash
  def to_hash; end
end

# Module containing common functionality for aggregation DSL classes
module Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods

  mixes_in_class_methods ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    # @private
    def included(base); end
  end
end

module Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  # Adds a nested aggregation into the aggregation definition
  #
  # @return [self]
  def aggregation(*args, &block); end

  # Returns the value of attribute aggregations.
  def aggregations; end

  # Looks up the corresponding class for a method being invoked, and initializes it
  #
  # @raise [NoMethodError] When the corresponding class cannot be found
  def method_missing(name, *args, &block); end

  # Convert the aggregations to a Hash
  #
  # A default implementation, DSL classes can overload it.
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end
end

# Module containing common functionality for DSL classes
module Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods

  mixes_in_class_methods ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  class << self
    # @private
    def included(base); end
  end
end

module Elasticsearch::DSL::Search::BaseComponent::ClassMethods
  # Get or set the name for the DSL class
  #
  # @example Set the index name for the `Article` model and re-evaluate it on each call
  #
  #   class MyQuery
  #   include BaseComponent
  #   name :my_special_query
  #   end
  #
  #   MyQuery.name
  #   # => :my_special_query
  def name(value = T.unsafe(nil)); end

  # Set the name for the DSL class
  def name=(value); end

  def option_methods; end
end

module Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  # Evaluates any block passed to the query
  #
  # @return [self]
  def call; end

  # Return true when the component definition is empty
  #
  # @return [Boolean]
  def empty?; end

  # Return the name for instance of the DSL class
  #
  # @return [String]
  def name; end

  # Convert the query definition to a Hash
  #
  # A default implementation, DSL classes can overload it.
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end

  private

  def method_missing(name, *args, &block); end
end

# Module containing common functionality for a "compound" (wrapping) filters, such as `and`, `or`, `not`
module Elasticsearch::DSL::Search::BaseCompoundFilterComponent
  include ::Enumerable
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation

  def initialize(*args, &block); end

  class << self
    # @private
    def included(base); end
  end
end

# Implements the {Enumerable} methods
module Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  def <<(value); end
  def [](*args); end
  def each(&block); end

  # @return [Boolean]
  def empty?; end

  def size; end
  def slice(*args); end
end

# Common functionality for the compound filter components
module Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  # Evaluates the block passed to initializer, ensuring it is called just once
  #
  # @api private
  # @return [self]
  def call; end

  # Convert the component to a Hash
  #
  # A default implementation, DSL classes can overload it.
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end
end

module Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation
  # Looks up the corresponding class for a method being invoked, and initializes it
  #
  # @raise [NoMethodError] When the corresponding class cannot be found
  def method_missing(name, *args, &block); end
end

# Wraps the `collapse` part of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-collapse.html
# @since 0.1.9
class Elasticsearch::DSL::Search::Collapse
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # Initialize the field collapse definition.
  #
  # @param field [String, Symbol] The name of the field.
  # @return [Collapse] a new instance of Collapse
  # @since 0.1.9
  def initialize(field, &block); end

  # Create an inner_hits definition.
  #
  # @example
  #   collapse :user
  #   inner_hits 'last_tweet' do
  #   size 10
  #   from 5
  #   sort do
  #   by :date, order: 'desc'
  #   by :likes, order: 'asc'
  #   end
  #   end
  #   end
  # @return self
  # @since 0.1.9
  def inner_hits(name, &block); end

  # Specify the max_concurrent_group_searches setting on the collapse definition.
  #
  # @example
  #   collapse :user
  #   max_concurrent_group_searches 4
  #   end
  # @return self.
  # @since 0.1.9
  def max_concurrent_group_searches(max); end

  # Convert the definition to a hash, to be used in a search request.
  #
  # @example
  #   definition = collapse :user
  #   max_concurrent_group_searches 4
  #   end
  # @return [Hash] The collapse clause as a hash.
  # @since 0.1.9
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Wraps the `filter` part of a search definition, aggregation, etc
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-filters.html
class Elasticsearch::DSL::Search::Filter
  # @return [Filter] a new instance of Filter
  def initialize(*args, &block); end

  # Evaluates any block passed to the query
  #
  # @return [self]
  def call; end

  # Looks up the corresponding class for a method being invoked, and initializes it
  #
  # @raise [NoMethodError] When the corresponding class cannot be found
  def method_missing(name, *args, &block); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end
end

# Contains the classes for Elasticsearch filters
module Elasticsearch::DSL::Search::Filters; end

# A compound filter which matches documents by an intersection of individual filters.
#
# @example Pass the filters as a Hash
#   search do
#   query do
#   filtered do
#   filter do
#   _and filters: [ {term: { color: 'red' }}, {term: { size:  'xxl' }} ]
#   end
#   end
#   end
#   end
# @example Define the filters with a block
#
#   search do
#   query do
#   filtered do
#   filter do
#   _and do
#   term color: 'red'
#   term size:  'xxl'
#   end
#   end
#   end
#   end
#   end
# @note Since `and` is a keyword in Ruby, use the `_and` method in DSL definitions
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-and-filter.html
class Elasticsearch::DSL::Search::Filters::And
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Enumerable
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A compound filter which matches documents based on combinations of filters
#
# See the integration test for a working example.
#
# @example Defining a bool filter with multiple conditions
#
#   search do
#   query do
#   filtered do
#   filter do
#   bool do
#   must do
#   term category: 'men'
#   end
#
#   must do
#   term size:  'xxl'
#   end
#
#   should do
#   term color: 'red'
#   end
#
#   must_not do
#   term manufacturer: 'evil'
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-filter.html
class Elasticsearch::DSL::Search::Filters::Bool
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def minimum_should_match(*args); end
  def must(*args, &block); end
  def must_not(*args, &block); end
  def should(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents which have a non-`null` value in the specified field
# (ie. the reverse of the `missing` filter)
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   exists field: 'occupation'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-filter.html
class Elasticsearch::DSL::Search::Filters::Exists
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents which fall into a "box" of the specified geographical coordinates
#
# See the integration test for a working example.
#
# Use eg. <http://boundingbox.klokantech.com> to visually define the bounding box.
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   geo_bounding_box :location do
#   top_right   "50.1815123678,14.7149200439"
#   bottom_left "49.9415476869,14.2162566185"
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/geo-bounding-box.html
class Elasticsearch::DSL::Search::Filters::GeoBoundingBox
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def bottom(*args); end
  def bottom_left(*args); end
  def bottom_right(*args); end
  def left(*args); end
  def right(*args); end
  def top(*args); end
  def top_left(*args); end
  def top_right(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents which fall into a specified geographical distance
#
# See the integration test for a working example.
#
# @example Define the filter with a hash
#
#   search do
#   query do
#   filtered do
#   filter do
#   geo_distance location: '50.090223,14.399590', distance: '5km'
#   end
#   end
#   end
#   end
# @example Define the filter with a block
#
#   search do
#   query do
#   filtered do
#   filter do
#   geo_distance :location do
#   lat '50.090223'
#   lon '14.399590'
#   distance '5km'
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/geo-distance.html
class Elasticsearch::DSL::Search::Filters::GeoDistance
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # @return [GeoDistance] a new instance of GeoDistance
  def initialize(*args, &block); end

  def distance(*args); end
  def distance_type(*args); end
  def lat(*args); end
  def lon(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents which fall into a specified geographical distance range
#
# @example Define the filter with a hash
#
#   search do
#   query do
#   filtered do
#   filter do
#   geo_distance location: '50.090223,14.399590', gte: '2km', lte: '5km'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/geo-distance.html
class Elasticsearch::DSL::Search::Filters::GeoDistanceRange
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def lat(*args); end
  def lon(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents which fall into a specified geographical polygon
#
# See the integration test for a working example.
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   geo_polygon :location do
#   points [
#   [14.2244355,49.9419006],
#   [14.2244355,50.1774301],
#   [14.7067869,50.1774301],
#   [14.7067869,49.9419006],
#   [14.2244355,49.9419006]
#   ]
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-polygon-filter.html
class Elasticsearch::DSL::Search::Filters::GeoPolygon
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def points(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents which fall into a specified geographical shape
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   geo_shape :location do
#   shape type: 'envelope',
#   coordinates: [[14.2162566185,49.9415476869], [14.7149200439,50.1815123678]]
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-shape-filter.html
class Elasticsearch::DSL::Search::Filters::GeoShape
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def indexed_shape(*args); end
  def shape(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which translates lat/lon values into a geohash with the specified precision
# and returns all documents which fall into it
#
# See the integration test for a working example.
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   geohash_cell :location do
#   lat '50.090223'
#   lon '14.399590'
#   precision '5km'
#   neighbors true
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/geohash-cell-filter.html
class Elasticsearch::DSL::Search::Filters::GeohashCell
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # @return [GeohashCell] a new instance of GeohashCell
  def initialize(*args, &block); end

  def lat(*args); end
  def lon(*args); end
  def neighbors(*args); end
  def precision(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns parent documents for children documents matching a query or a filter
#
# @example Return articles where John has commented
#
#   search do
#   query do
#   filtered do
#   filter do
#   has_child do
#   type 'comment'
#   query do
#   match author: 'John'
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-filter.html
class Elasticsearch::DSL::Search::Filters::HasChild
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # DSL method for building the `filter` part of the query definition
  #
  # @return [self]
  def filter(*args, &block); end

  def inner_hits(*args); end
  def max_children(*args); end
  def min_children(*args); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns children documents for parent documents matching a query or a filter
#
# @example Return comments for articles about Ruby
#
#   search do
#   query do
#   filtered do
#   filter do
#   has_parent do
#   type 'article'
#   query do
#   match title: 'Ruby'
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-parent-filter.html
class Elasticsearch::DSL::Search::Filters::HasParent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # DSL method for building the `filter` part of the query definition
  #
  # @return [self]
  def filter(*args, &block); end

  def inner_hits(*args); end
  def parent_type(*args); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  def score_mode(*args); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents matching the specified IDs
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   ids values: [1, 2, 3]
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-filter.html
class Elasticsearch::DSL::Search::Filters::Ids
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def type(*args); end
  def values(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which executes a custom filter only for documents in specified indices,
# and optionally another filter for documents in other indices
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   indices do
#   indices ['audio', 'video']
#
#   filter do
#   terms tags: ['music']
#   end
#
#   no_match_filter do
#   terms tags: ['music', 'audio', 'video']
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-indices-filter.html
class Elasticsearch::DSL::Search::Filters::Indices
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # DSL method for building the `filter` part of the query definition
  #
  # @return [self]
  def filter(*args, &block); end

  def indices(*args); end

  # DSL method for building the `no_match_filter` part of the query definition
  #
  # @return [self]
  def no_match_filter(*args, &block); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which limits the number of documents to evaluate
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   limit value: 100
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-limit-filter.html
class Elasticsearch::DSL::Search::Filters::Limit
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which matches on all documents
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   match_all
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-filter.html
class Elasticsearch::DSL::Search::Filters::MatchAll
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents which have a `null` value in the specified field
# (ie. the reverse of the `exists` filter)
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   missing field: 'occupation'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-missing-filter.html
class Elasticsearch::DSL::Search::Filters::Missing
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def existence(*args); end
  def field(*args); end
  def null_value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which executes another filter in the context of a nested document
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   nested do
#   path 'comments'
#   filter do
#   term 'comments.title' => 'Ruby'
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-filter.html
class Elasticsearch::DSL::Search::Filters::Nested
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # DSL method for building the `filter` part of the query definition
  #
  # @return [self]
  def filter(*args, &block); end

  def path(*args); end
  def query(*args, &block); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which takes out documents matching a filter from the results
#
# @example Pass the filter as a Hash
#   search do
#   query do
#   filtered do
#   filter do
#   _not term: { color: 'red' }
#   end
#   end
#   end
#   end
# @example Define the filter with a block
#
#   search do
#   query do
#   filtered do
#   filter do
#   _not do
#   term color: 'red'
#   end
#   end
#   end
#   end
#   end
# @note Since `not` is a keyword in Ruby, use the `_not` method in DSL definitions
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-not-filter.html
class Elasticsearch::DSL::Search::Filters::Not
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # Looks up the corresponding class for a method being invoked, and initializes it
  #
  # @raise [NoMethodError] When the corresponding class cannot be found
  def method_missing(name, *args, &block); end

  # Convert the component to a Hash
  #
  # A default implementation, DSL classes can overload it.
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A compound filter which matches documents by a union of individual filters.
#
# @example Pass the filters as a Hash
#   search do
#   query do
#   filtered do
#   filter do
#   _or filters: [ {term: { color: 'red' }}, {term: { size:  'xxl' }} ]
#   end
#   end
#   end
#   end
# @example Define the filters with a block
#
#   search do
#   query do
#   filtered do
#   filter do
#   _or do
#   term color: 'red'
#   term size:  'xxl'
#   end
#   end
#   end
#   end
#   end
# @note Since `or` is a keyword in Ruby, use the `_or` method in DSL definitions
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-or-filter.html
class Elasticsearch::DSL::Search::Filters::Or
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Enumerable
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents where the field value a specified prefix
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   prefix path: '/usr/local'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-filter.html
class Elasticsearch::DSL::Search::Filters::Prefix
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which wraps a query so it can be used as a filter
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   query do
#   query_string :title do
#   query 'Ruby OR Python'
#   end
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-filter.html
class Elasticsearch::DSL::Search::Filters::Query
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # @return [Query] a new instance of Query
  def initialize(*args, &block); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents that have terms in a specified range
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   range :age do
#   gte 10
#   lte 20
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-filter.html
class Elasticsearch::DSL::Search::Filters::Range
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def format(*args); end
  def gt(*args); end
  def gte(*args); end
  def lt(*args); end
  def lte(*args); end
  def time_zone(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents matching the specified regular expression
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   regexp :path do
#   value '^/usr/?.*/var'
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-filter.html
class Elasticsearch::DSL::Search::Filters::Regexp
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def flags(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents matching the criteria defined with a script
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   script script: "doc['clicks'].value % 4 == 0"
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-script-filter.html
class Elasticsearch::DSL::Search::Filters::Script
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def params(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents matching the specified terms
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   term color: 'red'
#   end
#   end
#   end
#   end
# @note The specified terms are *not analyzed* (lowercased, stemmed, etc),
#   so they must match the indexed terms.
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-filter.html
class Elasticsearch::DSL::Search::Filters::Term
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents matching any term from the specified list of terms
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   terms tags: ['ruby', 'development']
#   end
#   end
#   end
#   end
# @note The specified terms are *not analyzed* (lowercased, stemmed, etc),
#   so they must match the indexed terms.
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-filter.html
class Elasticsearch::DSL::Search::Filters::Terms
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns documents matching the specified type
#
# @example
#
#   search do
#   query do
#   filtered do
#   filter do
#   type do
#   value 'article'
#   end
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-type-filter.html
class Elasticsearch::DSL::Search::Filters::Type
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Wraps the `highlight` part of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html
class Elasticsearch::DSL::Search::Highlight
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # @return [Highlight] a new instance of Highlight
  def initialize(*args, &block); end

  # Specify the `encoder` option for highlighting
  def encoder(value); end

  # Specify the `encoder` option for highlighting
  def encoder=(value); end

  # Specify a single field to highlight
  #
  # @example
  #
  #   search do
  #   highlight do
  #   field :title, fragment_size: 0
  #   field :body if options[:comments]
  #   end
  #   end
  def field(name, options = T.unsafe(nil)); end

  # Specify the fields to highlight
  #
  # @example
  #
  #   search do
  #   highlight do
  #   fields [:title, :body]
  #   field  :comments.body if options[:comments]
  #   end
  #   end
  def fields(value_or_name); end

  # Specify the closing tags for the highlighted snippets
  def post_tags(*value); end

  # Specify the closing tags for the highlighted snippets
  def post_tags=(*value); end

  # Specify the opening tags for the highlighted snippets
  def pre_tags(*value); end

  # Specify the opening tags for the highlighted snippets
  def pre_tags=(*value); end

  # Specify the `tags_schema` option for highlighting
  def tags_schema(value); end

  # Specify the `tags_schema` option for highlighting
  def tags_schema=(value); end

  # Convert the definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Wraps the "extra" options of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html
class Elasticsearch::DSL::Search::Options
  # @return [Options] a new instance of Options
  def initialize(*args, &block); end

  def _source(*args, &block); end

  # Returns true when there are no search options defined
  #
  # @return [Boolean]
  def empty?; end

  def explain(*args, &block); end
  def fielddata_fields(*args, &block); end
  def fields(*args, &block); end
  def indices_boost(*args, &block); end
  def min_score(*args, &block); end
  def rescore(*args, &block); end
  def script_fields(*args, &block); end
  def source(*args, &block); end

  # Convert the definition to a Hash
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end

  def track_scores(*args, &block); end
  def track_total_hits(*args, &block); end
  def version(*args, &block); end
end

Elasticsearch::DSL::Search::Options::DSL_METHODS = T.let(T.unsafe(nil), Array)

# Contains the classes for Elasticsearch queries
module Elasticsearch::DSL::Search::Queries; end

# A compound query which matches documents based on combinations of queries
#
# See the integration test for a working example.
#
# @example Defining a bool query with multiple conditions
#
#   search do
#   query do
#   bool do
#   must do
#   term category: 'men'
#   end
#
#   must do
#   term size:  'xxl'
#   end
#
#   should do
#   term color: 'red'
#   end
#
#   must_not do
#   term manufacturer: 'evil'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html
class Elasticsearch::DSL::Search::Queries::Bool
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def filter(*args, &block); end
  def minimum_should_match(*args); end
  def must(*args, &block); end
  def must_not(*args, &block); end
  def should(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which will decrease the score of documents matching the `negative` query
#
# @example
#
#   search do
#   query do
#   boosting do
#   positive terms: { amenities: ['wifi', 'pets'] }
#   negative terms: { amenities: ['pool'] }
#   negative_boost 0.5
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-boosting-query.html
class Elasticsearch::DSL::Search::Queries::Boosting
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def negative(*args); end
  def negative_boost(*args); end
  def positive(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which executes the search for low frequency terms first, and high frequency ("common")
# terms second
#
# This query is frequently used when a stopwords-based approach loses too much recall and/or precision.
#
# @example
#
#   search do
#   query do
#   common :body do
#   query 'shakespeare to be or not to be'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-common-terms-query.html
class Elasticsearch::DSL::Search::Queries::Common
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def cutoff_frequency(*args); end
  def disable_coord(*args); end
  def low_freq_operator(*args); end
  def minimum_should_match(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which wraps another query or filter and returns a constant score for matching documents
#
# @example
#
#   search do
#   query do
#   constant_score do
#   query do
#   match content: 'Twitter'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/ignoring-tfidf.html
class Elasticsearch::DSL::Search::Queries::ConstantScore
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end

  # DSL method for building the `filter` part of the query definition
  #
  # @return [self]
  def filter(*args, &block); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which will score the documents based on the highest score of any individual specified query,
# not by summing the scores (as eg. a `bool` query would)
#
# @example
#
#   search do
#   query do
#   dis_max do
#   queries [
#   { match: { title:   'albino' } },
#   { match: { content: 'elephant' } }
#   ]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/_best_fields.html
class Elasticsearch::DSL::Search::Queries::DisMax
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def queries(*args); end
  def tie_breaker(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Returns documents that have at least one non-null value in the field.
#
# @example Find documents with non-empty "name" property
#
#   search do
#   query do
#   exists do
#   field 'name'
#   end
#   end
#   end
# @example Find documents with an empty "name" property
#
#   search do
#   query do
#   bool do
#   must_not do
#   exists do
#   field 'name'
#   end
#   end
#   end
#   end
#   end
# @note The "Exists" query can be used as a "Missing" query in a "Bool" query "Must Not" context.
# @see https://www.elastic.co/guide/en/elasticsearch/reference/5.1/query-dsl-exists-query.html
class Elasticsearch::DSL::Search::Queries::Exists
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which allows to combine a query with a filter
#
# @example Find documents about Twitter published last month
#
#   search do
#   query do
#   filtered do
#   query do
#   multi_match do
#   query 'twitter'
#   fields [ :title, :abstract, :content ]
#   end
#   end
#   filter do
#   range :published_on do
#   gte 'now-1M/M'
#   end
#   end
#   end
#   end
#   end
# @note It's possible and common to define just the `filter` part of the search definition,
#   for a structured search use case.
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-filtered-query.html
class Elasticsearch::DSL::Search::Queries::Filtered
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # DSL method for building the `filter` part of the query definition
  #
  # @return [self]
  def filter(*args, &block); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  def strategy(*args); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which allows to modify the score of documents matching the query,
# either via built-in functions or a custom script
#
#     search do
#       query do
#         function_score do
#           filter do
#             terms amenities: ['wifi', 'pets']
#           end
#           functions << { gauss: { price:    { origin: 100, scale: 200 } } }
#           functions << { gauss: { location: { origin: '50.090223,14.399590', scale: '5km' } } }
#         end
#       end
#     end
#
# @example Find documents with specific amenities, boosting documents within a certain
#   price range and geogprahical location
# @see https://www.elastic.co/guide/en/elasticsearch/guide/current/function-score-query.html
class Elasticsearch::DSL::Search::Queries::FunctionScore
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # @return [FunctionScore] a new instance of FunctionScore
  def initialize(*args, &block); end

  def boost(*args); end
  def boost_mode(*args); end

  # DSL method for building the `filter` part of the query definition
  #
  # @return [self]
  def filter(*args, &block); end

  # DSL method for building the `functions` part of the query definition
  #
  # @return [Array]
  def functions(value = T.unsafe(nil)); end

  # Set the `functions` part of the query definition
  #
  # @return [Array]
  def functions=(value); end

  def max_boost(*args); end
  def min_score(*args); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  def score_mode(*args); end
  def script_score(*args); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which uses a Levenshtein distance on string fields and plus-minus margin on numerical
# fields to match documents
#
# @example
#
#   search do
#   query do
#   fuzzy :name do
#   value 'Eyjafjallajökull'
#   end
#   end
#   end
# @example
#
#   search do
#   query do
#   fuzzy :published_on do
#   value '2014-01-01'
#   fuzziness '7d'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html
class Elasticsearch::DSL::Search::Queries::Fuzzy
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def fuzziness(*args); end
  def max_expansions(*args); end
  def prefix_length(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents which are similar to the specified text
#
# @example
#
#   search do
#   query do
#   fuzzy_like_this do
#   like_text 'Eyjafjallajökull'
#   fields [:title, :abstract, :content]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-flt-query.html
class Elasticsearch::DSL::Search::Queries::FuzzyLikeThis
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def fields(*args); end
  def fuzziness(*args); end
  def ignore_tf(*args); end
  def like_text(*args); end
  def max_query_terms(*args); end
  def prefix_length(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents which are similar to the specified text,
# executed on a single field
#
# @example
#
#   search do
#   query do
#   fuzzy_like_this_field :content do
#   like_text 'Eyjafjallajökull'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-flt-field-query.html
class Elasticsearch::DSL::Search::Queries::FuzzyLikeThisField
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def fuzziness(*args); end
  def ignore_tf(*args); end
  def like_text(*args); end
  def max_query_terms(*args); end
  def prefix_length(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents which fall into a specified geographical shape
#
# @example
#
#   search do
#   query do
#   geo_shape :location do
#   shape type: 'envelope',
#   coordinates: [[14.2162566185,49.9415476869], [14.7149200439,50.1815123678]]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-shape-query.html
class Elasticsearch::DSL::Search::Queries::GeoShape
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def indexed_shape(*args); end
  def shape(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns parent documents for children documents matching a query
#
# @example Return articles where John has commented
#
#   search do
#   query do
#   has_child do
#   type 'comment'
#   query do
#   match author: 'John'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html
class Elasticsearch::DSL::Search::Queries::HasChild
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def inner_hits(*args); end
  def max_children(*args); end
  def min_children(*args); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  def score_mode(*args); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns children documents for parent documents matching a query
#
# @example Return comments for articles about Ruby
#
#   search do
#   query do
#   has_parent do
#   type 'article'
#   query do
#   match title: 'Ruby'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-parent-query.html
class Elasticsearch::DSL::Search::Queries::HasParent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def inner_hits(*args); end
  def parent_type(*args); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  def score_mode(*args); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching the specified IDs
#
# @example
#
#   search do
#   query do
#   ids values: [1, 2, 3]
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html
class Elasticsearch::DSL::Search::Queries::Ids
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def type(*args); end
  def values(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which executes a custom query only for documents in specified indices,
# and optionally another query for documents in other indices
#
# @example
#
#   search do
#   query do
#   indices do
#   indices        ['audio', 'video']
#   query          match: { artist: 'Fugazi' }
#   no_match_query match: { label:  'Dischord' }
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-indices-query.html
class Elasticsearch::DSL::Search::Queries::Indices
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def indices(*args); end
  def no_match_query(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Wraps the `inner_hits` part of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html
class Elasticsearch::DSL::Search::Queries::InnerHits
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # Initialize the inner_hits definition.
  #
  # @param name [String, Symbol] The name to be used for the particular inner hit definition in the response.
  #   Useful when multiple inner hits have been defined in a single search request. The default depends in which
  #   query the inner hit is defined. For has_child query and filter this is the child type, has_parent query
  #   and filter this is the parent type and the nested query and filter this is the nested path.
  # @return [InnerHits] a new instance of InnerHits
  # @since 0.1.9
  def initialize(name = T.unsafe(nil), &block); end

  # Specify the from setting on the inner_hits definition, the offset from where the first hit to fetch for
  #   each inner_hits in the returned regular search hits.
  #
  # @example
  #   inner_hits 'last_tweet' do
  #   size 10
  #   from 5
  #   end
  # @param from [Integer] The from setting.
  # @return self.
  # @since 0.1.9
  def from(from); end

  # Specify the size setting on the inner_hits definition, the maximum number of hits to return per inner_hits.
  #   By default the top three matching hits are returned.
  #
  # @example
  #   inner_hits 'last_tweet' do
  #   size 10
  #   from 5
  #   end
  # @param size [Integer] The size setting.
  # @return self.
  # @since 0.1.9
  def size(size); end

  # Specify the sorting on the inner_hits definition. By default the hits are sorted by the score.
  #
  # @example
  #   inner_hits 'last_tweet' do
  #   size 10
  #   from 5
  #   sort do
  #   by :date, order: 'desc'
  #   by :likes, order: 'asc'
  #   end
  #   end
  # @param from [Integer] The from setting.
  # @return self.
  # @since 0.1.9
  def sort(*args, &block); end

  # Convert the definition to a hash, to be used in a search request.
  #
  # @example
  #   definition = begin do
  #   inner_hits 'last_tweet' do
  #   size 10
  #   from 5
  #   sort do
  #   by :date, order: 'desc'
  #   by :likes, order: 'asc'
  #   end
  #   end
  # @return [Hash] The inner_hits clause as a hash.
  # @since 0.1.9
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A simple to use, yet sophisticated query which returns documents matching the specified terms,
# taking into account field types, analyzers, etc. and allowing to search in phrase, prefix, fuzzy modes
#
# @example
#
#   search do
#   query do
#   match :content do
#   query    'how to fix my printer'
#   operator 'and'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html
class Elasticsearch::DSL::Search::Queries::Match
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def cutoff_frequency(*args); end
  def fuzziness(*args); end
  def fuzzy_rewrite(*args); end
  def lenient(*args); end
  def max_expansions(*args); end
  def minimum_should_match(*args); end
  def operator(*args); end
  def prefix_length(*args); end
  def query(*args); end
  def type(*args); end
  def zero_terms_query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which matches all documents
#
# @example
#
#   search do
#   query do
#   match_all
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html
class Elasticsearch::DSL::Search::Queries::MatchAll
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query that analyzes the text and creates a phrase query out of the analyzed text
#
# @example
#
#   search do
#   query do
#   match_phrase :content do
#   query 'example content'
#   analyzer 'standard'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html
class Elasticsearch::DSL::Search::Queries::MatchPhrase
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def query(*args); end
  def slop(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# The same as match_phrase, except that it allows for prefix matches on the last term in the text
#
# @example
#
#   search do
#   query do
#   match_phrase_prefix :content do
#   query 'example content'
#   max_expansions 10
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html
class Elasticsearch::DSL::Search::Queries::MatchPhrasePrefix
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def max_expansions(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents which are similar to the specified text or documents
#
# @example Find documents similar to the provided text
#
#   search do
#   query do
#   more_like_this do
#   like   ['Eyjafjallajökull']
#   fields [:title, :abstract, :content]
#   end
#   end
#   end
# @example Find documents similar to the specified documents
#
#   search do
#   query do
#   more_like_this do
#   like   [{_id: 1}, {_id: 2}, {_id: 3}]
#   fields [:title, :abstract]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html
class Elasticsearch::DSL::Search::Queries::MoreLikeThis
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def boost_terms(*args); end
  def docs(*args); end
  def exclude(*args); end
  def fields(*args); end
  def ids(*args); end
  def include(*args); end
  def like(*args); end
  def like_text(*args); end
  def max_doc_freq(*args); end
  def max_query_terms(*args); end
  def max_word_length(*args); end
  def min_doc_freq(*args); end
  def min_term_freq(*args); end
  def min_word_length(*args); end
  def percent_terms_to_match(*args); end
  def stop_words(*args); end
  def unlike(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which allows to use the `match` query on multiple fields
#
# @example
#
#   search do
#   query do
#   multi_match do
#   query    'how to fix my printer'
#   fields   [:title, :abstract, :content]
#   operator 'and'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html
class Elasticsearch::DSL::Search::Queries::MultiMatch
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def cutoff_frequency(*args); end
  def fields(*args); end
  def fuzziness(*args); end
  def max_expansions(*args); end
  def minimum_should_match(*args); end
  def operator(*args); end
  def prefix_length(*args); end
  def query(*args); end
  def rewrite(*args); end
  def slop(*args); end
  def type(*args); end
  def use_dis_max(*args); end
  def zero_terms_query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns the root documents for nested documents matching the specified query
#
# @example Return articles where John has commented
#
#   search do
#   query do
#   nested do
#   path 'comments'
#   query do
#   match user: 'John'
#   end
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html
class Elasticsearch::DSL::Search::Queries::Nested
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def inner_hits(*args); end
  def path(*args); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  def score_mode(*args); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching a specified prefix
#
# search do
#   query do
#     prefix :title do
#       value 'dis'
#     end
#   end
# end
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html
class Elasticsearch::DSL::Search::Queries::Prefix
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching a specified expression in the Lucene Query String syntax
#
# @example
#
#   search do
#   query do
#   query_string do
#   query '(mortgage OR (bank AND loan)) AND published_on:[2013-01-01 TO 2013-12-31]'
#   fields [:title, :content]
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html
# @see http://lucene.apache.org/core/2_9_4/queryparsersyntax.html
class Elasticsearch::DSL::Search::Queries::QueryString
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def allow_leading_wildcard(*args); end
  def analyze_wildcard(*args); end
  def analyzer(*args); end
  def auto_generate_synonyms_phrase_query(*args); end
  def boost(*args); end
  def default_field(*args); end
  def default_operator(*args); end
  def enable_position_increments(*args); end
  def fields(*args); end
  def fuzziness(*args); end
  def fuzzy_max_expansions(*args); end
  def fuzzy_prefix_length(*args); end
  def lenient(*args); end
  def locale(*args); end
  def lowercase_expanded_terms(*args); end
  def minimum_should_match(*args); end
  def phrase_slop(*args); end
  def query(*args); end
  def tie_breaker(*args); end
  def time_zone(*args); end
  def type(*args); end
  def use_dis_max(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching the specified range
#
# @example Find documents within a numeric range
#
#   search do
#   query do
#   range :age do
#   gte 10
#   lte 20
#   end
#   end
#   end
# @example Find documents published within a date range
#
#   search do
#   query do
#   range :published_on do
#   gte '2013-01-01'
#   lte 'now'
#   time_zone '+1:00'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html
class Elasticsearch::DSL::Search::Queries::Range
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def format(*args); end
  def gt(*args); end
  def gte(*args); end
  def lt(*args); end
  def lte(*args); end
  def time_zone(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which matches documents matching a regular expression
#
# @example
#
#   search do
#   query do
#   regexp :path do
#   value '^/usr/?.*/var'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html
class Elasticsearch::DSL::Search::Queries::Regexp
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def flags(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching a simplified query string syntax
#
# @example
#
#   search do
#   query do
#   simple_query_string do
#   query  'disaster -health'
#   fields ['title^5', 'abstract', 'content']
#   default_operator 'and'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html
class Elasticsearch::DSL::Search::Queries::SimpleQueryString
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def all_fields(*args); end
  def analyze_wildcard(*args); end
  def analyzer(*args); end
  def default_operator(*args); end
  def fields(*args); end
  def flags(*args); end
  def lenient(*args); end
  def minimum_should_match(*args); end
  def query(*args); end
  def quote_field_suffix(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents having spans in the beginning of the field
#
# @example
#
#   search do
#   query do
#   span_first match: { span_term: { title: 'disaster' } }, end: 10
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-first-query.html
# @see https://lucene.apache.org/core/5_0_0/core/org/apache/lucene/search/spans/package-summary.html
class Elasticsearch::DSL::Search::Queries::SpanFirst
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def match(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching a multi-term query as a span query
#
# @example
#
#   search do
#   query do
#   span_multi match: { prefix: { name: 'jo' } }
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-multi-term-query.html
# @see https://lucene.apache.org/core/5_0_0/core/org/apache/lucene/search/spans/package-summary.html
class Elasticsearch::DSL::Search::Queries::SpanMulti
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def match(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching spans near each other
#
# @example
#
#   search do
#   query do
#   span_near clauses: [ { span_term: { title: 'disaster' } }, { span_term: { title: 'health' } } ],
#   slop: 10
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-near-query.html
# @see https://lucene.apache.org/core/5_0_0/core/org/apache/lucene/search/spans/package-summary.html
class Elasticsearch::DSL::Search::Queries::SpanNear
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def collect_payloads(*args); end
  def in_order(*args); end
  def slop(*args); end
  def span_near(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which discards matching documents which overlap with another query
#
# @example
#
#   search do
#   query do
#   span_not include: { span_term: { title: 'disaster' } },
#   exclude: { span_term: { title: 'health' } }
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-not-query.html
# @see https://lucene.apache.org/core/5_0_0/core/org/apache/lucene/search/spans/package-summary.html
class Elasticsearch::DSL::Search::Queries::SpanNot
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def dist(*args); end
  def exclude(*args); end
  def include(*args); end
  def post(*args); end
  def pre(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching the union of provided queries
#
# @example
#
#   search do
#   query do
#   span_or clauses: [ { span_term: { title: 'disaster' } }, { span_term: { title: 'health' } } ]
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-or-query.html
# @see https://lucene.apache.org/core/5_0_0/core/org/apache/lucene/search/spans/package-summary.html
class Elasticsearch::DSL::Search::Queries::SpanOr
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def clauses(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents having a span containing a term
#
# @example
#
#   search do
#   query do
#   span_term title: 'disaster'
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-term-query.html
# @see https://lucene.apache.org/core/5_0_0/core/org/apache/lucene/search/spans/package-summary.html
class Elasticsearch::DSL::Search::Queries::SpanTerm
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which allows to use Mustache templates for query definitions
#
# @example
#
#   search do
#   query do
#   template do
#   query  match: { content: '{query_string}' }
#   params query_string: 'twitter'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-template-query.html
class Elasticsearch::DSL::Search::Queries::Template
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def params(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching the specified term
#
# @example
#
#   search do
#   query do
#   term category: 'Opinion'
#   end
#   end
# @note The specified term is *not analyzed* (lowercased, stemmed, etc)
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html
class Elasticsearch::DSL::Search::Queries::Term
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching the specified terms
#
# @example
#
#   search do
#   query do
#   terms categories: ['World', 'Opinion']
#   end
#   end
# @note The specified terms are *not analyzed* (lowercased, stemmed, etc)
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-common-terms-query.html
class Elasticsearch::DSL::Search::Queries::Terms
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A filter which returns parent documents for children documents matching a query
#
# @example Return articles with comments mentioning 'twitter', summing the score
#
#   search do
#   query do
#   top_children do
#   type  'comment'
#   query match: { body: 'twitter' }
#   score 'sum'
#   end
#   end
#   end
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-top-children-query.html
class Elasticsearch::DSL::Search::Queries::TopChildren
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def _scope(*args); end
  def factor(*args); end
  def incremental_factor(*args); end

  # DSL method for building the `query` part of the query definition
  #
  # @return [self]
  def query(*args, &block); end

  def score(*args); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# A query which returns documents matching a wildcard expression
#
# @example
#
#   search do
#   query do
#   wildcard title: 'tw*'
#   end
#   end
# @note The expression is *not analyzed* (lowercased, stemmed, etc)
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html
class Elasticsearch::DSL::Search::Queries::Wildcard
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Wraps the `query` part of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html
class Elasticsearch::DSL::Search::Query
  # @return [Query] a new instance of Query
  def initialize(*args, &block); end

  # Evaluates any block passed to the query
  #
  # @return [self]
  def call; end

  # Looks up the corresponding class for a method being invoked, and initializes it
  #
  # @raise [NoMethodError] When the corresponding class cannot be found
  def method_missing(name, *args, &block); end

  # Converts the query definition to a Hash
  #
  # @return [Hash]
  def to_hash(options = T.unsafe(nil)); end
end

# Wraps the whole search definition (queries, filters, aggregations, sorting, etc)
class Elasticsearch::DSL::Search::Search
  # @return [Search] a new instance of Search
  def initialize(*args, &block); end

  # DSL method for building the `aggregations` part of a search definition
  #
  # @return [self]
  def aggregation(*args, &block); end

  # Returns the value of attribute aggregations.
  def aggregations; end

  # Set the aggregations part of a search definition
  def aggregations=(value); end

  # DSL method for building the `collapse` part of a search definition
  #
  # @return [self, Collapse]
  def collapse(*args, &block); end

  # DSL method for building the `filter` part of a search definition
  #
  # @return [self]
  def filter(*args, &block); end

  # Set the filter part of a search definition
  def filter=(value); end

  # DSL method for building the `from` part of a search definition
  #
  # @return [self]
  def from(value = T.unsafe(nil)); end

  # DSL method for building the `from` part of a search definition
  #
  # @return [self]
  def from=(value = T.unsafe(nil)); end

  # DSL method for building the `highlight` part of a search definition
  #
  # @return [self]
  def highlight(*args, &block); end

  # Delegates to the methods provided by the {Options} class
  def method_missing(name, *args, &block); end

  # DSL method for building the `post_filter` part of a search definition
  #
  # @return [self]
  def post_filter(*args, &block); end

  # Set the post_filter part of a search definition
  def post_filter=(value); end

  # DSL method for building or accessing the `query` part of a search definition
  #
  # @return [self, {Query}]
  def query(*args, &block); end

  # Set the query part of a search definition
  def query=(value); end

  # DSL method for building the `size` part of a search definition
  #
  # @return [self]
  def size(value = T.unsafe(nil)); end

  # DSL method for building the `size` part of a search definition
  #
  # @return [self]
  def size=(value = T.unsafe(nil)); end

  # DSL method for building the `sort` part of a search definition
  #
  # @return [self]
  def sort(*args, &block); end

  # Set the sort part of a search definition
  def sort=(value); end

  # DSL method for building the `stored_fields` part of a search definition
  #
  # @return [self]
  def stored_fields(value = T.unsafe(nil)); end

  # DSL method for building the `stored_fields` part of a search definition
  #
  # @return [self]
  def stored_fields=(value = T.unsafe(nil)); end

  # DSL method for building the `suggest` part of a search definition
  #
  # @return [self]
  def suggest(*args, &block); end

  # Set the suggest part of a search definition
  def suggest=(value); end

  # Converts the search definition to a Hash
  #
  # @return [Hash]
  def to_hash; end
end

# Wraps the `sort` part of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html
class Elasticsearch::DSL::Search::Sort
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # @return [Sort] a new instance of Sort
  def initialize(*args, &block); end

  # DSL method to specify sorting item
  #
  # @example
  #
  #   search do
  #   sort do
  #   by :category
  #   by :clicks, order: 'desc'
  #   end
  #   end
  def by(name, direction = T.unsafe(nil)); end

  # Return whether the definition is empty
  #
  # @return [Boolean]
  def empty?; end

  # Convert the definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Wraps the `suggest` part of a search definition
#
# @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html
class Elasticsearch::DSL::Search::Suggest
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  # @return [Suggest] a new instance of Suggest
  def initialize(key, options = T.unsafe(nil), &block); end

  # Convert the definition to a Hash
  #
  # @return [Hash]
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

# Generic utility methods
module Elasticsearch::DSL::Utils
  extend ::Elasticsearch::DSL::Utils

  # Camelize an underscored string
  #
  # A lightweight version of ActiveSupport's `camelize`
  #
  # @api private
  # @example
  #   __camelize('query_string')
  #   # => 'QueryString'
  def __camelize(string); end
end

Elasticsearch::DSL::VERSION = T.let(T.unsafe(nil), String)
Elasticsearch::VERSION = T.let(T.unsafe(nil), String)
