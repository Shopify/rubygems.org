# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-em_http` gem.
# Please instead update this file by running `bin/tapioca gem faraday-em_http`.

module Faraday
  class << self
    def default_adapter; end
    def default_adapter=(adapter); end
    def default_connection; end
    def default_connection=(_arg0); end
    def default_connection_options; end
    def default_connection_options=(options); end
    def ignore_env_proxy; end
    def ignore_env_proxy=(_arg0); end
    def lib_path; end
    def lib_path=(_arg0); end
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end
    def require_lib(*libs); end
    def require_libs(*libs); end
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end
    def root_path; end
    def root_path=(_arg0); end

    private

    def method_missing(name, *args, &block); end
  end
end

class Faraday::Adapter
  extend ::Faraday::MiddlewareRegistry
  extend ::Faraday::DependencyLoader
  extend ::Faraday::Adapter::Parallelism
  extend ::Faraday::AutoloadHelper

  def initialize(_app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  def call(env); end
  def close; end
  def connection(env); end

  private

  def request_timeout(type, options); end
  def save_response(env, status, body, headers = T.unsafe(nil), reason_phrase = T.unsafe(nil)); end
end

Faraday::Adapter::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# EventMachine adapter. This adapter is useful for either asynchronous
# requests when in an EM reactor loop, or for making parallel requests in
# synchronous code.
class Faraday::Adapter::EMHttp < ::Faraday::Adapter
  include ::Faraday::Adapter::EMHttp::Options

  def call(env); end
  def create_request(env); end
  def error_message(client); end

  # @return [Boolean]
  def parallel?(env); end

  def perform_request(env); end

  # TODO: reuse the connection to support pipelining
  def perform_single_request(env); end

  # @raise [error_class]
  def raise_error(msg); end

  # @return [Boolean]
  def timeout_message?(msg); end

  class << self
    # @return [Manager]
    def setup_parallel_manager(_options = T.unsafe(nil)); end
  end
end

# This parallel manager is designed to start an EventMachine loop
# and block until all registered requests have been completed.
class Faraday::Adapter::EMHttp::Manager
  # @return [Manager] a new instance of Manager
  # @see reset
  def initialize; end

  def add(&block); end
  def check_finished; end
  def perform_request; end

  # Re-initializes instance variables
  def reset; end

  def run; end

  # @return [Boolean]
  def running?; end
end

# Options is a module containing helpers to convert the Faraday env object
# into options hashes for EMHTTP method calls.
module Faraday::Adapter::EMHttp::Options
  # Reads out compression header settings from env into options
  def configure_compression(options, env); end

  # Reads out proxy settings from env into options
  def configure_proxy(options, env); end

  # Reads out host and port settings from env into options
  def configure_socket(options, env); end

  # Reads out SSL certificate settings from env into options
  def configure_ssl(options, env); end

  # Reads out timeout settings from env into options
  def configure_timeout(options, env); end

  # @return [Hash]
  def connection_config(env); end

  def read_body(env); end
  def request_config(env); end
  def request_options(env); end
end

Faraday::Adapter::TIMEOUT_KEYS = T.let(T.unsafe(nil), Hash)
Faraday::CONTENT_TYPE = T.let(T.unsafe(nil), String)
Faraday::CompositeReadIO = Faraday::Multipart::CompositeReadIO

# Main Faraday::EmHttp module
module Faraday::EmHttp; end

Faraday::EmHttp::VERSION = T.let(T.unsafe(nil), String)
Faraday::FilePart = UploadIO
Faraday::METHODS_WITH_BODY = T.let(T.unsafe(nil), Array)
Faraday::METHODS_WITH_QUERY = T.let(T.unsafe(nil), Array)
Faraday::ParamPart = Faraday::Multipart::ParamPart
Faraday::Parts = Parts
Faraday::Timer = Timeout
Faraday::UploadIO = UploadIO
Faraday::VERSION = T.let(T.unsafe(nil), String)
