# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `m` gem.
# Please instead update this file by running `bin/tapioca gem m`.

# Runners are in charge of running your tests, depending on the framework
# Instead of slamming all of this junk in an `M` class, it's here instead.
module M
  class << self
    # Accept arguments coming from bin/m and run tests, then bail out immediately.
    def run(argv); end
  end
end

class M::Executor
  # @return [Executor] a new instance of Executor
  def initialize(testable); end

  def execute; end

  private

  def runner; end

  # Finds all test suites in this test file, with test methods included.
  def suites; end

  # Returns the value of attribute testable.
  def testable; end

  # Shoves tests together in our custom container and collection classes.
  # Memoize it since it's unnecessary to do this more than one for a given file.
  def tests; end
end

class M::Frameworks
  def framework_runner; end

  private

  # @return [Boolean]
  def minitest4?; end

  # @return [Boolean]
  def minitest5?; end

  # @return [Boolean]
  def test_unit?; end

  class << self
    def framework_runner; end

    # @return [Boolean]
    def minitest4?; end

    # @return [Boolean]
    def minitest5?; end

    def minitest_version_major; end

    # @return [Boolean]
    def test_unit?; end
  end
end

class M::Parser
  # @return [Parser] a new instance of Parser
  def initialize(argv); end

  def parse; end

  private

  # Returns the value of attribute argv.
  def argv; end

  def parse_options!(argv); end

  # Returns the value of attribute testable.
  def testable; end

  def wildcard(type); end
end

class M::Runner
  # @return [Runner] a new instance of Runner
  def initialize(argv); end

  # There's two steps to running our tests:
  # 1. Parsing the given input for the tests we need to find (or groups of tests)
  # 2. Run those tests we found that match what you wanted
  def run; end
end

module M::Runners; end

class M::Runners::Base
  def run(_test_arguments); end
  def suites; end
  def test_methods(suite_class); end
end

class M::Runners::Minitest4 < ::M::Runners::Base
  def run(test_arguments); end
  def suites; end
end

class M::Runners::Minitest5 < ::M::Runners::Base
  def run(test_arguments); end
  def suites; end
  def test_methods(suite_class); end
end

class M::Runners::TestUnit < ::M::Runners::Base
  def run(test_arguments); end
  def suites; end
  def test_methods(suite_class); end
end

class M::Runners::UnsupportedFramework < ::M::Runners::Base
  def run(_test_arguments); end
  def suites; end

  private

  def not_supported; end
end

class M::Testable
  # @return [Testable] a new instance of Testable
  def initialize(file = T.unsafe(nil), lines = T.unsafe(nil), recursive = T.unsafe(nil)); end

  # Returns the value of attribute file.
  def file; end

  # Sets the attribute file
  #
  # @param value the value to set the attribute file to.
  def file=(_arg0); end

  # Returns the value of attribute lines.
  def lines; end

  def lines=(lines); end

  # Returns the value of attribute passthrough_options.
  def passthrough_options; end

  # Sets the attribute passthrough_options
  #
  # @param value the value to set the attribute passthrough_options to.
  def passthrough_options=(_arg0); end

  # Returns the value of attribute recursive.
  def recursive; end

  # Sets the attribute recursive
  #
  # @param value the value to set the attribute recursive to.
  def recursive=(_arg0); end
end

M::VERSION = T.let(T.unsafe(nil), String)
