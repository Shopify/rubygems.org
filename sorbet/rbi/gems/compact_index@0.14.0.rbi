# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `compact_index` gem.
# Please instead update this file by running `bin/tapioca gem compact_index`.

module CompactIndex
  class << self
    # Formats the versions information of a gem, to be display in the `/info/gemname` endpoint.
    #
    # @param versions_file [CompactIndex::VersionsFile] which will be used as a base response
    # @param gems [Array] an optional list of [CompactIndex::Gem] to be appended on the end
    #   of the base file. Example:
    #   ```ruby
    #   [
    #   CompactIndex::GemVersion.new("1.0.1", "ruby", "abc123", "info123", [
    #   CompactIndex::Dependency.new("foo", "=1.0.1", "abc123"),
    #   CompactIndex::Dependency.new("bar", ">1.0, <2.0", "abc123"),
    #   ])
    #   ]
    #   ```
    # @return [String] The formated output. Example:
    #   ```ruby
    #   --
    #   1.0.1 requirement:<2.0&>1.0|checksum:abc1
    #   1.0.2 requirement:<2.0&>1.0,requirement2:=1.1|checksum:abc2,ruby:>1.0,rubygems:>2.0
    #   ```
    def info(versions); end

    # Formats a list of gem names, to be used on the /names endpoint.
    #
    # @param gem_names [Array] array with gem names to be formated, in alphabetical order
    # @return [String] names on the specified format for new index /names endpoint. Example:
    #   ```ruby
    #   ---
    #   rack
    #   rails
    #   other-gem
    #   ```
    def names(gem_names); end

    # Returns the versions file content argumented with some extra gems
    #
    # @param versions_file [CompactIndex::VersionsFile] which will be used as a base response
    # @param gems [Array] an optional list of [CompactIndex::Gem] to be appended on the end
    #   of the base file. Example:
    #   ```ruby
    #   [
    #   CompactIndex::Gem.new("gem1", [
    #   CompactIndex::GemVersion.new("0.9.8", "ruby", "abc123"),
    #   CompactIndex::GemVersion.new("0.9.9", "jruby", "abc123"),
    #   ]),
    #   CompactIndex::Gem.new("gem2", [
    #   CompactIndex::GemVersion.new("0.9.8", "ruby", "abc123"),
    #   CompactIndex::GemVersion.new("0.9.9", "jruby", "abc123"),
    #   ])
    #   ]
    #   ```
    # @return [String] The formated output. Example:
    #   ```ruby
    #   created_at: 2001-01-01T01:01:01-01:01
    #   ---
    #   rack 0.1.0,0.1.1,0.1.2,0.2.0,0.2.1,0.3.0,0.4.0,0.4.1,0.5.0,0.5.1,0.5.2,0.5.3 c54e4b7e14861a5d8c225283b75075f4
    #   rails 0.0.1,0.1.0 00fd5c36764f4ec1e8adf1c9adaada55
    #   sinatra 0.1.1,0.1.2,0.1.3 46f0a24d291725736216b4b6e7412be6
    #   ```
    def versions(versions_file, gems = T.unsafe(nil), args = T.unsafe(nil)); end
  end
end

class CompactIndex::Dependency < ::Struct
  # Returns the value of attribute checksum
  #
  # @return [Object] the current value of checksum
  def checksum; end

  # Sets the attribute checksum
  #
  # @param value [Object] the value to set the attribute checksum to.
  # @return [Object] the newly set value
  def checksum=(_); end

  # Returns the value of attribute gem
  #
  # @return [Object] the current value of gem
  def gem; end

  # Sets the attribute gem
  #
  # @param value [Object] the value to set the attribute gem to.
  # @return [Object] the newly set value
  def gem=(_); end

  # Returns the value of attribute platform
  #
  # @return [Object] the current value of platform
  def platform; end

  # Sets the attribute platform
  #
  # @param value [Object] the value to set the attribute platform to.
  # @return [Object] the newly set value
  def platform=(_); end

  # Returns the value of attribute version
  #
  # @return [Object] the current value of version
  def version; end

  # Sets the attribute version
  #
  # @param value [Object] the value to set the attribute version to.
  # @return [Object] the newly set value
  def version=(_); end

  def version_and_platform; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class CompactIndex::Gem < ::Struct
  def <=>(other); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute versions
  #
  # @return [Object] the current value of versions
  def versions; end

  # Sets the attribute versions
  #
  # @param value [Object] the value to set the attribute versions to.
  # @return [Object] the newly set value
  def versions=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class CompactIndex::GemVersion < ::Struct
  def <=>(other); end

  # Returns the value of attribute checksum
  #
  # @return [Object] the current value of checksum
  def checksum; end

  # Sets the attribute checksum
  #
  # @param value [Object] the value to set the attribute checksum to.
  # @return [Object] the newly set value
  def checksum=(_); end

  # Returns the value of attribute dependencies
  #
  # @return [Object] the current value of dependencies
  def dependencies; end

  # Sets the attribute dependencies
  #
  # @param value [Object] the value to set the attribute dependencies to.
  # @return [Object] the newly set value
  def dependencies=(_); end

  # Returns the value of attribute info_checksum
  #
  # @return [Object] the current value of info_checksum
  def info_checksum; end

  # Sets the attribute info_checksum
  #
  # @param value [Object] the value to set the attribute info_checksum to.
  # @return [Object] the newly set value
  def info_checksum=(_); end

  # Returns the value of attribute number
  #
  # @return [Object] the current value of number
  def number; end

  # Sets the attribute number
  #
  # @param value [Object] the value to set the attribute number to.
  # @return [Object] the newly set value
  def number=(_); end

  def number_and_platform; end

  # Returns the value of attribute platform
  #
  # @return [Object] the current value of platform
  def platform; end

  # Sets the attribute platform
  #
  # @param value [Object] the value to set the attribute platform to.
  # @return [Object] the newly set value
  def platform=(_); end

  # Returns the value of attribute ruby_version
  #
  # @return [Object] the current value of ruby_version
  def ruby_version; end

  # Sets the attribute ruby_version
  #
  # @param value [Object] the value to set the attribute ruby_version to.
  # @return [Object] the newly set value
  def ruby_version=(_); end

  # Returns the value of attribute rubygems_version
  #
  # @return [Object] the current value of rubygems_version
  def rubygems_version; end

  # Sets the attribute rubygems_version
  #
  # @param value [Object] the value to set the attribute rubygems_version to.
  # @return [Object] the newly set value
  def rubygems_version=(_); end

  def to_line; end

  private

  def deps_line; end
  def join_multiple(requirements); end
  def ruby_version_line; end
  def rubygems_version_line; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

CompactIndex::VERSION = T.let(T.unsafe(nil), String)

class CompactIndex::VersionsFile
  # @return [VersionsFile] a new instance of VersionsFile
  def initialize(file = T.unsafe(nil)); end

  # @raise [ArgumentError]
  def contents(gems = T.unsafe(nil), args = T.unsafe(nil)); end

  def create(gems, ts = T.unsafe(nil)); end
  def updated_at; end

  private

  def calculate_info_checksums(gems); end
  def created_at_header(path); end
  def gem_lines(gems); end
end
