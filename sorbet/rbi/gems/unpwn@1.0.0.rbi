# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `unpwn` gem.
# Please instead update this file by running `bin/tapioca gem unpwn`.

# Unpwn checks passwords locally against the top one million passwords, as
# provided by the nbp project. Then, it uses the haveibeenpwned API to check
# proposed passwords against the largest corpus of publicly dumped passwords in
# the world.
class Unpwn
  # Set the options for an Unpwn instance. `request_options` will be passed
  # verbatim to the `Pwned` library.
  #
  # @raise [ArgumentError]
  # @return [Unpwn] a new instance of Unpwn
  def initialize(min: T.unsafe(nil), max: T.unsafe(nil), request_options: T.unsafe(nil)); end

  # Check if a password meets the requirements and is not pwned.
  #
  # @return [Boolean]
  def acceptable?(password); end

  def bloom; end
  def inspect; end

  # Returns the value of attribute max.
  def max; end

  # Returns the value of attribute min.
  def min; end

  # Checks if a password is pwned, via bloom filter then `Pwned`.
  #
  # @return [Boolean]
  def pwned?(password); end

  # Returns the value of attribute request_options.
  def request_options; end

  def to_s; end

  class << self
    # Check if a password is _not_ already published. To set options like
    # `min`, `max`, or on the Pwned API check, create a new instance of your
    # own.
    #
    # @return [Boolean]
    def acceptable?(password); end

    # Set `offline` to true to disable requests to the haveibeenpwned.com API
    def offline; end

    # Set `offline` to true to disable requests to the haveibeenpwned.com API
    def offline=(_arg0); end
  end
end

Unpwn::VERSION = T.let(T.unsafe(nil), String)

# Validator class for passwords
#
# ==== Examples
#
# Validates that attribute is not pwned, but only in production.
#
#   class User < ActiveRecord::Base
#     validates :password, unpwned: true, if: -> { Rails.env.production? }
#   end
#
# Validates that attribute meets min/max and is not pwned.
#
#   class User < ActiveRecord::Base
#     validates :password, unpwned: { min: 12, max: 128 }
#   end
class UnpwnedValidator < ::ActiveModel::EachValidator
  def validate_each(record, attribute, value); end
end
